//
// ContactCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ContactCreateDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
    }
    static let tenantIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let firstNameRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let lastNameRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    static let emailRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let taxIdRule = StringRule(minLength: 0, maxLength: 20, pattern: nil)
    static let primaryContactIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let aboutRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let countryIdRule = StringRule(minLength: 0, maxLength: 3, pattern: nil)
    static let postalCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w\\s-]{3,10}$/")
    static let dunsRule = StringRule(minLength: 0, maxLength: 9, pattern: nil)
    public var id: UUID?
    public var timestamp: Date?
    public var tenantId: String
    public var type: ModelType
    public var firstName: String
    public var lastName: String?
    public var email: String
    public var taxId: String?
    public var primaryContactId: String?
    public var qualifiedName: String?
    public var about: String?
    public var countryId: String?
    public var stateId: String?
    public var cityId: String?
    public var mobilePhone: String?
    public var businessPhone: String?
    public var postalCode: String?
    public var duns: String?
    public var jobTitle: String?
    public var webUrl: String?
    public var currencyId: String?
    public var languageId: String?
    public var timezoneId: String?
    public var birthday: Date?
    public var streetLine1: String?
    public var streetLine2: String?
    public var gitHubUrl: String?
    public var twitchUrl: String?
    public var redditUrl: String?
    public var tikTokUrl: String?
    public var websiteUrl: String?
    public var twitterUrl: String?
    public var facebookUrl: String?
    public var youTubeUrl: String?
    public var linkedInUrl: String?
    public var instagramUrl: String?
    public var githubUsername: String?
    public var instagramUsername: AnyCodable?
    public var tikTokUsername: AnyCodable?
    public var stackExchangeUrl: AnyCodable?
    public var stackOverflowUrl: AnyCodable?
    public var parentContactId: AnyCodable?

    public init(id: UUID? = nil, timestamp: Date? = nil, tenantId: String, type: ModelType, firstName: String, lastName: String? = nil, email: String, taxId: String? = nil, primaryContactId: String? = nil, qualifiedName: String? = nil, about: String? = nil, countryId: String? = nil, stateId: String? = nil, cityId: String? = nil, mobilePhone: String? = nil, businessPhone: String? = nil, postalCode: String? = nil, duns: String? = nil, jobTitle: String? = nil, webUrl: String? = nil, currencyId: String? = nil, languageId: String? = nil, timezoneId: String? = nil, birthday: Date? = nil, streetLine1: String? = nil, streetLine2: String? = nil, gitHubUrl: String? = nil, twitchUrl: String? = nil, redditUrl: String? = nil, tikTokUrl: String? = nil, websiteUrl: String? = nil, twitterUrl: String? = nil, facebookUrl: String? = nil, youTubeUrl: String? = nil, linkedInUrl: String? = nil, instagramUrl: String? = nil, githubUsername: String? = nil, instagramUsername: AnyCodable? = nil, tikTokUsername: AnyCodable? = nil, stackExchangeUrl: AnyCodable? = nil, stackOverflowUrl: AnyCodable? = nil, parentContactId: AnyCodable? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.tenantId = tenantId
        self.type = type
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.taxId = taxId
        self.primaryContactId = primaryContactId
        self.qualifiedName = qualifiedName
        self.about = about
        self.countryId = countryId
        self.stateId = stateId
        self.cityId = cityId
        self.mobilePhone = mobilePhone
        self.businessPhone = businessPhone
        self.postalCode = postalCode
        self.duns = duns
        self.jobTitle = jobTitle
        self.webUrl = webUrl
        self.currencyId = currencyId
        self.languageId = languageId
        self.timezoneId = timezoneId
        self.birthday = birthday
        self.streetLine1 = streetLine1
        self.streetLine2 = streetLine2
        self.gitHubUrl = gitHubUrl
        self.twitchUrl = twitchUrl
        self.redditUrl = redditUrl
        self.tikTokUrl = tikTokUrl
        self.websiteUrl = websiteUrl
        self.twitterUrl = twitterUrl
        self.facebookUrl = facebookUrl
        self.youTubeUrl = youTubeUrl
        self.linkedInUrl = linkedInUrl
        self.instagramUrl = instagramUrl
        self.githubUsername = githubUsername
        self.instagramUsername = instagramUsername
        self.tikTokUsername = tikTokUsername
        self.stackExchangeUrl = stackExchangeUrl
        self.stackOverflowUrl = stackOverflowUrl
        self.parentContactId = parentContactId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case tenantId
        case type
        case firstName
        case lastName
        case email
        case taxId
        case primaryContactId
        case qualifiedName
        case about
        case countryId
        case stateId
        case cityId
        case mobilePhone
        case businessPhone
        case postalCode
        case duns
        case jobTitle
        case webUrl
        case currencyId
        case languageId
        case timezoneId
        case birthday
        case streetLine1
        case streetLine2
        case gitHubUrl
        case twitchUrl
        case redditUrl
        case tikTokUrl
        case websiteUrl
        case twitterUrl
        case facebookUrl
        case youTubeUrl
        case linkedInUrl
        case instagramUrl
        case githubUsername
        case instagramUsername
        case tikTokUsername
        case stackExchangeUrl
        case stackOverflowUrl
        case parentContactId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encode(tenantId, forKey: .tenantId)
        try container.encode(type, forKey: .type)
        try container.encode(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(taxId, forKey: .taxId)
        try container.encodeIfPresent(primaryContactId, forKey: .primaryContactId)
        try container.encodeIfPresent(qualifiedName, forKey: .qualifiedName)
        try container.encodeIfPresent(about, forKey: .about)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(mobilePhone, forKey: .mobilePhone)
        try container.encodeIfPresent(businessPhone, forKey: .businessPhone)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(duns, forKey: .duns)
        try container.encodeIfPresent(jobTitle, forKey: .jobTitle)
        try container.encodeIfPresent(webUrl, forKey: .webUrl)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(languageId, forKey: .languageId)
        try container.encodeIfPresent(timezoneId, forKey: .timezoneId)
        try container.encodeIfPresent(birthday, forKey: .birthday)
        try container.encodeIfPresent(streetLine1, forKey: .streetLine1)
        try container.encodeIfPresent(streetLine2, forKey: .streetLine2)
        try container.encodeIfPresent(gitHubUrl, forKey: .gitHubUrl)
        try container.encodeIfPresent(twitchUrl, forKey: .twitchUrl)
        try container.encodeIfPresent(redditUrl, forKey: .redditUrl)
        try container.encodeIfPresent(tikTokUrl, forKey: .tikTokUrl)
        try container.encodeIfPresent(websiteUrl, forKey: .websiteUrl)
        try container.encodeIfPresent(twitterUrl, forKey: .twitterUrl)
        try container.encodeIfPresent(facebookUrl, forKey: .facebookUrl)
        try container.encodeIfPresent(youTubeUrl, forKey: .youTubeUrl)
        try container.encodeIfPresent(linkedInUrl, forKey: .linkedInUrl)
        try container.encodeIfPresent(instagramUrl, forKey: .instagramUrl)
        try container.encodeIfPresent(githubUsername, forKey: .githubUsername)
        try container.encodeIfPresent(instagramUsername, forKey: .instagramUsername)
        try container.encodeIfPresent(tikTokUsername, forKey: .tikTokUsername)
        try container.encodeIfPresent(stackExchangeUrl, forKey: .stackExchangeUrl)
        try container.encodeIfPresent(stackOverflowUrl, forKey: .stackOverflowUrl)
        try container.encodeIfPresent(parentContactId, forKey: .parentContactId)
    }
}

