//
// CartDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CartDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var ip: String?
    public var type: String?
    public var total: Double?
    public var taxes: Double?
    public var freight: Double?
    public var subTotal: Double?
    public var currencyId: String?
    public var countryId: String?
    public var itemCartRecordsCount: Int?
    public var itemToCompareRecordsCount: Int?

    public init(id: String? = nil, ip: String? = nil, type: String? = nil, total: Double? = nil, taxes: Double? = nil, freight: Double? = nil, subTotal: Double? = nil, currencyId: String? = nil, countryId: String? = nil, itemCartRecordsCount: Int? = nil, itemToCompareRecordsCount: Int? = nil) {
        self.id = id
        self.ip = ip
        self.type = type
        self.total = total
        self.taxes = taxes
        self.freight = freight
        self.subTotal = subTotal
        self.currencyId = currencyId
        self.countryId = countryId
        self.itemCartRecordsCount = itemCartRecordsCount
        self.itemToCompareRecordsCount = itemToCompareRecordsCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case ip
        case type
        case total
        case taxes
        case freight
        case subTotal
        case currencyId
        case countryId
        case itemCartRecordsCount
        case itemToCompareRecordsCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(ip, forKey: .ip)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(taxes, forKey: .taxes)
        try container.encodeIfPresent(freight, forKey: .freight)
        try container.encodeIfPresent(subTotal, forKey: .subTotal)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(itemCartRecordsCount, forKey: .itemCartRecordsCount)
        try container.encodeIfPresent(itemToCompareRecordsCount, forKey: .itemToCompareRecordsCount)
    }
}

