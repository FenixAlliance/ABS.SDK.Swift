//
// ExtendedContactDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExtendedContactDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
    }
    public var id: String?
    public var timestamp: Date?
    public var qualifiedName: String?
    public var tenantId: String?
    public var type: ModelType?
    public var publicName: String?
    public var firstName: String?
    public var lastName: String?
    public var jobTitle: String?
    public var coverUrl: String?
    public var avatarUrl: String?
    public var countryId: String?
    public var timezoneId: String?
    public var languageId: String?
    public var socialProfileId: String?
    public var webUrl: String?
    public var gitHubUrl: String?
    public var twitchUrl: String?
    public var redditUrl: String?
    public var tikTokUrl: String?
    public var websiteUrl: String?
    public var twitterUrl: String?
    public var facebookUrl: String?
    public var youTubeUrl: String?
    public var linkedInUrl: String?
    public var instagramUrl: String?
    public var githubUsername: String?
    public var duns: String?
    public var taxId: String?
    public var email: String?
    public var about: String?
    public var street: String?
    public var cartId: String?
    public var cityId: String?
    public var zipCode: String?
    public var stateId: String?
    public var walletId: String?
    public var faxNumber: String?
    public var postalCode: String?
    public var currencyId: String?
    public var streetLine1: String?
    public var streetLine2: String?
    public var territoryId: String?
    public var mobilePhone: String?
    public var enrollmentId: String?
    public var annualRevenue: String?
    public var relatedUserId: String?
    public var businessPhone: String?
    public var ownerContactId: String?
    public var relatedTenantId: String?
    public var activityFeedId: String?
    public var parentContactId: String?
    public var identityProvider: String?
    public var partnerProfileId: String?
    public var primaryContactId: String?
    public var activeDirectoryId: String?
    public var identityProviderAccessToken: String?
    public var birthday: Date?
    public var cart: CartDto?
    public var wallet: WalletDto?
    public var socialProfile: SocialProfileDto?
    public var parentContact: SimpleContactDto?
    public var primaryContact: SimpleContactDto?

    public init(id: String? = nil, timestamp: Date? = nil, qualifiedName: String? = nil, tenantId: String? = nil, type: ModelType? = nil, publicName: String? = nil, firstName: String? = nil, lastName: String? = nil, jobTitle: String? = nil, coverUrl: String? = nil, avatarUrl: String? = nil, countryId: String? = nil, timezoneId: String? = nil, languageId: String? = nil, socialProfileId: String? = nil, webUrl: String? = nil, gitHubUrl: String? = nil, twitchUrl: String? = nil, redditUrl: String? = nil, tikTokUrl: String? = nil, websiteUrl: String? = nil, twitterUrl: String? = nil, facebookUrl: String? = nil, youTubeUrl: String? = nil, linkedInUrl: String? = nil, instagramUrl: String? = nil, githubUsername: String? = nil, duns: String? = nil, taxId: String? = nil, email: String? = nil, about: String? = nil, street: String? = nil, cartId: String? = nil, cityId: String? = nil, zipCode: String? = nil, stateId: String? = nil, walletId: String? = nil, faxNumber: String? = nil, postalCode: String? = nil, currencyId: String? = nil, streetLine1: String? = nil, streetLine2: String? = nil, territoryId: String? = nil, mobilePhone: String? = nil, enrollmentId: String? = nil, annualRevenue: String? = nil, relatedUserId: String? = nil, businessPhone: String? = nil, ownerContactId: String? = nil, relatedTenantId: String? = nil, activityFeedId: String? = nil, parentContactId: String? = nil, identityProvider: String? = nil, partnerProfileId: String? = nil, primaryContactId: String? = nil, activeDirectoryId: String? = nil, identityProviderAccessToken: String? = nil, birthday: Date? = nil, cart: CartDto? = nil, wallet: WalletDto? = nil, socialProfile: SocialProfileDto? = nil, parentContact: SimpleContactDto? = nil, primaryContact: SimpleContactDto? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.qualifiedName = qualifiedName
        self.tenantId = tenantId
        self.type = type
        self.publicName = publicName
        self.firstName = firstName
        self.lastName = lastName
        self.jobTitle = jobTitle
        self.coverUrl = coverUrl
        self.avatarUrl = avatarUrl
        self.countryId = countryId
        self.timezoneId = timezoneId
        self.languageId = languageId
        self.socialProfileId = socialProfileId
        self.webUrl = webUrl
        self.gitHubUrl = gitHubUrl
        self.twitchUrl = twitchUrl
        self.redditUrl = redditUrl
        self.tikTokUrl = tikTokUrl
        self.websiteUrl = websiteUrl
        self.twitterUrl = twitterUrl
        self.facebookUrl = facebookUrl
        self.youTubeUrl = youTubeUrl
        self.linkedInUrl = linkedInUrl
        self.instagramUrl = instagramUrl
        self.githubUsername = githubUsername
        self.duns = duns
        self.taxId = taxId
        self.email = email
        self.about = about
        self.street = street
        self.cartId = cartId
        self.cityId = cityId
        self.zipCode = zipCode
        self.stateId = stateId
        self.walletId = walletId
        self.faxNumber = faxNumber
        self.postalCode = postalCode
        self.currencyId = currencyId
        self.streetLine1 = streetLine1
        self.streetLine2 = streetLine2
        self.territoryId = territoryId
        self.mobilePhone = mobilePhone
        self.enrollmentId = enrollmentId
        self.annualRevenue = annualRevenue
        self.relatedUserId = relatedUserId
        self.businessPhone = businessPhone
        self.ownerContactId = ownerContactId
        self.relatedTenantId = relatedTenantId
        self.activityFeedId = activityFeedId
        self.parentContactId = parentContactId
        self.identityProvider = identityProvider
        self.partnerProfileId = partnerProfileId
        self.primaryContactId = primaryContactId
        self.activeDirectoryId = activeDirectoryId
        self.identityProviderAccessToken = identityProviderAccessToken
        self.birthday = birthday
        self.cart = cart
        self.wallet = wallet
        self.socialProfile = socialProfile
        self.parentContact = parentContact
        self.primaryContact = primaryContact
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case qualifiedName
        case tenantId
        case type
        case publicName
        case firstName
        case lastName
        case jobTitle
        case coverUrl
        case avatarUrl
        case countryId
        case timezoneId
        case languageId
        case socialProfileId
        case webUrl
        case gitHubUrl
        case twitchUrl
        case redditUrl
        case tikTokUrl
        case websiteUrl
        case twitterUrl
        case facebookUrl
        case youTubeUrl
        case linkedInUrl
        case instagramUrl
        case githubUsername
        case duns
        case taxId
        case email
        case about
        case street
        case cartId
        case cityId
        case zipCode
        case stateId
        case walletId
        case faxNumber
        case postalCode
        case currencyId
        case streetLine1
        case streetLine2
        case territoryId
        case mobilePhone
        case enrollmentId
        case annualRevenue
        case relatedUserId
        case businessPhone
        case ownerContactId
        case relatedTenantId
        case activityFeedId
        case parentContactId
        case identityProvider
        case partnerProfileId
        case primaryContactId
        case activeDirectoryId
        case identityProviderAccessToken
        case birthday
        case cart
        case wallet
        case socialProfile
        case parentContact
        case primaryContact
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(qualifiedName, forKey: .qualifiedName)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(publicName, forKey: .publicName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(jobTitle, forKey: .jobTitle)
        try container.encodeIfPresent(coverUrl, forKey: .coverUrl)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(timezoneId, forKey: .timezoneId)
        try container.encodeIfPresent(languageId, forKey: .languageId)
        try container.encodeIfPresent(socialProfileId, forKey: .socialProfileId)
        try container.encodeIfPresent(webUrl, forKey: .webUrl)
        try container.encodeIfPresent(gitHubUrl, forKey: .gitHubUrl)
        try container.encodeIfPresent(twitchUrl, forKey: .twitchUrl)
        try container.encodeIfPresent(redditUrl, forKey: .redditUrl)
        try container.encodeIfPresent(tikTokUrl, forKey: .tikTokUrl)
        try container.encodeIfPresent(websiteUrl, forKey: .websiteUrl)
        try container.encodeIfPresent(twitterUrl, forKey: .twitterUrl)
        try container.encodeIfPresent(facebookUrl, forKey: .facebookUrl)
        try container.encodeIfPresent(youTubeUrl, forKey: .youTubeUrl)
        try container.encodeIfPresent(linkedInUrl, forKey: .linkedInUrl)
        try container.encodeIfPresent(instagramUrl, forKey: .instagramUrl)
        try container.encodeIfPresent(githubUsername, forKey: .githubUsername)
        try container.encodeIfPresent(duns, forKey: .duns)
        try container.encodeIfPresent(taxId, forKey: .taxId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(about, forKey: .about)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(cartId, forKey: .cartId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(zipCode, forKey: .zipCode)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(walletId, forKey: .walletId)
        try container.encodeIfPresent(faxNumber, forKey: .faxNumber)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(streetLine1, forKey: .streetLine1)
        try container.encodeIfPresent(streetLine2, forKey: .streetLine2)
        try container.encodeIfPresent(territoryId, forKey: .territoryId)
        try container.encodeIfPresent(mobilePhone, forKey: .mobilePhone)
        try container.encodeIfPresent(enrollmentId, forKey: .enrollmentId)
        try container.encodeIfPresent(annualRevenue, forKey: .annualRevenue)
        try container.encodeIfPresent(relatedUserId, forKey: .relatedUserId)
        try container.encodeIfPresent(businessPhone, forKey: .businessPhone)
        try container.encodeIfPresent(ownerContactId, forKey: .ownerContactId)
        try container.encodeIfPresent(relatedTenantId, forKey: .relatedTenantId)
        try container.encodeIfPresent(activityFeedId, forKey: .activityFeedId)
        try container.encodeIfPresent(parentContactId, forKey: .parentContactId)
        try container.encodeIfPresent(identityProvider, forKey: .identityProvider)
        try container.encodeIfPresent(partnerProfileId, forKey: .partnerProfileId)
        try container.encodeIfPresent(primaryContactId, forKey: .primaryContactId)
        try container.encodeIfPresent(activeDirectoryId, forKey: .activeDirectoryId)
        try container.encodeIfPresent(identityProviderAccessToken, forKey: .identityProviderAccessToken)
        try container.encodeIfPresent(birthday, forKey: .birthday)
        try container.encodeIfPresent(cart, forKey: .cart)
        try container.encodeIfPresent(wallet, forKey: .wallet)
        try container.encodeIfPresent(socialProfile, forKey: .socialProfile)
        try container.encodeIfPresent(parentContact, forKey: .parentContact)
        try container.encodeIfPresent(primaryContact, forKey: .primaryContact)
    }
}

