//
// ContactUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ContactUpdateDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
    }
    static let dunsRule = StringRule(minLength: 0, maxLength: 9, pattern: nil)
    static let taxIdRule = StringRule(minLength: 0, maxLength: 20, pattern: nil)
    static let emailRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let firstNameRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let lastNameRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    static let primaryContactIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let aboutRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    static let jobTitleRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    static let countryIdRule = StringRule(minLength: 0, maxLength: 3, pattern: nil)
    public var type: ModelType
    public var birthday: Date?
    public var duns: String?
    public var taxId: String?
    public var email: String
    public var firstName: String
    public var lastName: String?
    public var primaryContactId: String?
    public var qualifiedName: String?
    public var about: String?
    public var mobilePhone: String?
    public var businessPhone: String?
    public var jobTitle: String?
    public var countryId: String?
    public var parentContactId: String?
    public var stateId: String?
    public var cityId: String?
    public var postalCode: String?
    public var streetLine1: String?
    public var streetLine2: String?
    public var currencyId: String?
    public var languageId: String?
    public var timezoneId: String?
    public var coverUrl: String?
    public var githubUsername: String?
    public var instagramUsername: String?
    public var twitchUrl: String?
    public var redditUrl: String?
    public var gitHubUrl: String?
    public var githubUrl: String?
    public var tikTokUrl: String?
    public var twitterUrl: String?
    public var youTubeUrl: String?
    public var websiteUrl: String?
    public var facebookUrl: String?
    public var linkedInUrl: String?
    public var instagramUrl: String?
    public var tikTokUsername: String?
    public var stackExchangeUrl: String?
    public var stackOverflowUrl: String?

    public init(type: ModelType, birthday: Date? = nil, duns: String? = nil, taxId: String? = nil, email: String, firstName: String, lastName: String? = nil, primaryContactId: String? = nil, qualifiedName: String? = nil, about: String? = nil, mobilePhone: String? = nil, businessPhone: String? = nil, jobTitle: String? = nil, countryId: String? = nil, parentContactId: String? = nil, stateId: String? = nil, cityId: String? = nil, postalCode: String? = nil, streetLine1: String? = nil, streetLine2: String? = nil, currencyId: String? = nil, languageId: String? = nil, timezoneId: String? = nil, coverUrl: String? = nil, githubUsername: String? = nil, instagramUsername: String? = nil, twitchUrl: String? = nil, redditUrl: String? = nil, gitHubUrl: String? = nil, githubUrl: String? = nil, tikTokUrl: String? = nil, twitterUrl: String? = nil, youTubeUrl: String? = nil, websiteUrl: String? = nil, facebookUrl: String? = nil, linkedInUrl: String? = nil, instagramUrl: String? = nil, tikTokUsername: String? = nil, stackExchangeUrl: String? = nil, stackOverflowUrl: String? = nil) {
        self.type = type
        self.birthday = birthday
        self.duns = duns
        self.taxId = taxId
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.primaryContactId = primaryContactId
        self.qualifiedName = qualifiedName
        self.about = about
        self.mobilePhone = mobilePhone
        self.businessPhone = businessPhone
        self.jobTitle = jobTitle
        self.countryId = countryId
        self.parentContactId = parentContactId
        self.stateId = stateId
        self.cityId = cityId
        self.postalCode = postalCode
        self.streetLine1 = streetLine1
        self.streetLine2 = streetLine2
        self.currencyId = currencyId
        self.languageId = languageId
        self.timezoneId = timezoneId
        self.coverUrl = coverUrl
        self.githubUsername = githubUsername
        self.instagramUsername = instagramUsername
        self.twitchUrl = twitchUrl
        self.redditUrl = redditUrl
        self.gitHubUrl = gitHubUrl
        self.githubUrl = githubUrl
        self.tikTokUrl = tikTokUrl
        self.twitterUrl = twitterUrl
        self.youTubeUrl = youTubeUrl
        self.websiteUrl = websiteUrl
        self.facebookUrl = facebookUrl
        self.linkedInUrl = linkedInUrl
        self.instagramUrl = instagramUrl
        self.tikTokUsername = tikTokUsername
        self.stackExchangeUrl = stackExchangeUrl
        self.stackOverflowUrl = stackOverflowUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case birthday
        case duns
        case taxId
        case email
        case firstName
        case lastName
        case primaryContactId
        case qualifiedName
        case about
        case mobilePhone
        case businessPhone
        case jobTitle
        case countryId
        case parentContactId
        case stateId
        case cityId
        case postalCode
        case streetLine1
        case streetLine2
        case currencyId
        case languageId
        case timezoneId
        case coverUrl
        case githubUsername
        case instagramUsername
        case twitchUrl
        case redditUrl
        case gitHubUrl
        case githubUrl
        case tikTokUrl
        case twitterUrl
        case youTubeUrl
        case websiteUrl
        case facebookUrl
        case linkedInUrl
        case instagramUrl
        case tikTokUsername
        case stackExchangeUrl
        case stackOverflowUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(birthday, forKey: .birthday)
        try container.encodeIfPresent(duns, forKey: .duns)
        try container.encodeIfPresent(taxId, forKey: .taxId)
        try container.encode(email, forKey: .email)
        try container.encode(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(primaryContactId, forKey: .primaryContactId)
        try container.encodeIfPresent(qualifiedName, forKey: .qualifiedName)
        try container.encodeIfPresent(about, forKey: .about)
        try container.encodeIfPresent(mobilePhone, forKey: .mobilePhone)
        try container.encodeIfPresent(businessPhone, forKey: .businessPhone)
        try container.encodeIfPresent(jobTitle, forKey: .jobTitle)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(parentContactId, forKey: .parentContactId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(streetLine1, forKey: .streetLine1)
        try container.encodeIfPresent(streetLine2, forKey: .streetLine2)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(languageId, forKey: .languageId)
        try container.encodeIfPresent(timezoneId, forKey: .timezoneId)
        try container.encodeIfPresent(coverUrl, forKey: .coverUrl)
        try container.encodeIfPresent(githubUsername, forKey: .githubUsername)
        try container.encodeIfPresent(instagramUsername, forKey: .instagramUsername)
        try container.encodeIfPresent(twitchUrl, forKey: .twitchUrl)
        try container.encodeIfPresent(redditUrl, forKey: .redditUrl)
        try container.encodeIfPresent(gitHubUrl, forKey: .gitHubUrl)
        try container.encodeIfPresent(githubUrl, forKey: .githubUrl)
        try container.encodeIfPresent(tikTokUrl, forKey: .tikTokUrl)
        try container.encodeIfPresent(twitterUrl, forKey: .twitterUrl)
        try container.encodeIfPresent(youTubeUrl, forKey: .youTubeUrl)
        try container.encodeIfPresent(websiteUrl, forKey: .websiteUrl)
        try container.encodeIfPresent(facebookUrl, forKey: .facebookUrl)
        try container.encodeIfPresent(linkedInUrl, forKey: .linkedInUrl)
        try container.encodeIfPresent(instagramUrl, forKey: .instagramUrl)
        try container.encodeIfPresent(tikTokUsername, forKey: .tikTokUsername)
        try container.encodeIfPresent(stackExchangeUrl, forKey: .stackExchangeUrl)
        try container.encodeIfPresent(stackOverflowUrl, forKey: .stackOverflowUrl)
    }
}

