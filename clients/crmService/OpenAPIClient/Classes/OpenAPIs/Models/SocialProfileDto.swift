//
// SocialProfileDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SocialProfileDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public var id: String?
    public var timestamp: Date?
    public var name: String?
    public var about: String?
    public var cover: String?
    public var avatar: String?
    public var countryId: String?
    public var countryName: String?
    public var identityId: String?
    public var followsCount: Int?
    public var messagesCount: Int?
    public var followersCount: Int?
    public var notificationsCount: Int?
    public var unreadNotificationsCount: Int?
    public var unreadMessagesCount: Int?
    public var type: ModelType?
    public var socialFeedId: String?
    public var twitterUrl: String?
    public var facebookURL: String?
    public var linkedInURL: String?
    public var youtubeURL: String?
    public var githubURL: String?
    public var pinterestURL: String?
    public var dribbleURL: String?
    public var domain: String?
    public var notes: String?

    public init(id: String? = nil, timestamp: Date? = nil, name: String? = nil, about: String? = nil, cover: String? = nil, avatar: String? = nil, countryId: String? = nil, countryName: String? = nil, identityId: String? = nil, followsCount: Int? = nil, messagesCount: Int? = nil, followersCount: Int? = nil, notificationsCount: Int? = nil, unreadNotificationsCount: Int? = nil, unreadMessagesCount: Int? = nil, type: ModelType? = nil, socialFeedId: String? = nil, twitterUrl: String? = nil, facebookURL: String? = nil, linkedInURL: String? = nil, youtubeURL: String? = nil, githubURL: String? = nil, pinterestURL: String? = nil, dribbleURL: String? = nil, domain: String? = nil, notes: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.name = name
        self.about = about
        self.cover = cover
        self.avatar = avatar
        self.countryId = countryId
        self.countryName = countryName
        self.identityId = identityId
        self.followsCount = followsCount
        self.messagesCount = messagesCount
        self.followersCount = followersCount
        self.notificationsCount = notificationsCount
        self.unreadNotificationsCount = unreadNotificationsCount
        self.unreadMessagesCount = unreadMessagesCount
        self.type = type
        self.socialFeedId = socialFeedId
        self.twitterUrl = twitterUrl
        self.facebookURL = facebookURL
        self.linkedInURL = linkedInURL
        self.youtubeURL = youtubeURL
        self.githubURL = githubURL
        self.pinterestURL = pinterestURL
        self.dribbleURL = dribbleURL
        self.domain = domain
        self.notes = notes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case name
        case about
        case cover
        case avatar
        case countryId
        case countryName
        case identityId
        case followsCount
        case messagesCount
        case followersCount
        case notificationsCount
        case unreadNotificationsCount
        case unreadMessagesCount
        case type
        case socialFeedId
        case twitterUrl
        case facebookURL
        case linkedInURL
        case youtubeURL
        case githubURL
        case pinterestURL
        case dribbleURL
        case domain
        case notes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(about, forKey: .about)
        try container.encodeIfPresent(cover, forKey: .cover)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(countryName, forKey: .countryName)
        try container.encodeIfPresent(identityId, forKey: .identityId)
        try container.encodeIfPresent(followsCount, forKey: .followsCount)
        try container.encodeIfPresent(messagesCount, forKey: .messagesCount)
        try container.encodeIfPresent(followersCount, forKey: .followersCount)
        try container.encodeIfPresent(notificationsCount, forKey: .notificationsCount)
        try container.encodeIfPresent(unreadNotificationsCount, forKey: .unreadNotificationsCount)
        try container.encodeIfPresent(unreadMessagesCount, forKey: .unreadMessagesCount)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(socialFeedId, forKey: .socialFeedId)
        try container.encodeIfPresent(twitterUrl, forKey: .twitterUrl)
        try container.encodeIfPresent(facebookURL, forKey: .facebookURL)
        try container.encodeIfPresent(linkedInURL, forKey: .linkedInURL)
        try container.encodeIfPresent(youtubeURL, forKey: .youtubeURL)
        try container.encodeIfPresent(githubURL, forKey: .githubURL)
        try container.encodeIfPresent(pinterestURL, forKey: .pinterestURL)
        try container.encodeIfPresent(dribbleURL, forKey: .dribbleURL)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(notes, forKey: .notes)
    }
}

