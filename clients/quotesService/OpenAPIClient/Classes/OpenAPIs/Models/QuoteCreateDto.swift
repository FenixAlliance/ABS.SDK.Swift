//
// QuoteCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuoteCreateDto: Codable, JSONEncodable, Hashable {

    public enum QuoteStatus: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }
    public var id: UUID?
    public var timestamp: Date?
    public var closed: Bool?
    public var title: String?
    public var userId: String?
    public var tenantId: String?
    public var priceListId: String?
    public var description: String?
    public var enrollmentId: String?
    public var individualId: String?
    public var paymentTermId: String?
    public var organizationId: String?
    public var currencyId: String?
    public var forexRate: Double?
    public var firstName: String?
    public var lastName: String?
    public var companyName: String?
    public var billingEmail: String?
    public var addressLine1: String?
    public var addressLine2: String?
    public var postalCode: String?
    public var countryId: String?
    public var stateId: String?
    public var cityId: String?
    public var cartId: String?
    public var dealUnitId: String?
    public var receiverTenantId: String?
    public var effectiveTo: Date?
    public var effectiveFrom: Date?
    public var quoteStatus: QuoteStatus?

    public init(id: UUID? = nil, timestamp: Date? = nil, closed: Bool? = nil, title: String? = nil, userId: String? = nil, tenantId: String? = nil, priceListId: String? = nil, description: String? = nil, enrollmentId: String? = nil, individualId: String? = nil, paymentTermId: String? = nil, organizationId: String? = nil, currencyId: String? = nil, forexRate: Double? = nil, firstName: String? = nil, lastName: String? = nil, companyName: String? = nil, billingEmail: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, postalCode: String? = nil, countryId: String? = nil, stateId: String? = nil, cityId: String? = nil, cartId: String? = nil, dealUnitId: String? = nil, receiverTenantId: String? = nil, effectiveTo: Date? = nil, effectiveFrom: Date? = nil, quoteStatus: QuoteStatus? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.closed = closed
        self.title = title
        self.userId = userId
        self.tenantId = tenantId
        self.priceListId = priceListId
        self.description = description
        self.enrollmentId = enrollmentId
        self.individualId = individualId
        self.paymentTermId = paymentTermId
        self.organizationId = organizationId
        self.currencyId = currencyId
        self.forexRate = forexRate
        self.firstName = firstName
        self.lastName = lastName
        self.companyName = companyName
        self.billingEmail = billingEmail
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.postalCode = postalCode
        self.countryId = countryId
        self.stateId = stateId
        self.cityId = cityId
        self.cartId = cartId
        self.dealUnitId = dealUnitId
        self.receiverTenantId = receiverTenantId
        self.effectiveTo = effectiveTo
        self.effectiveFrom = effectiveFrom
        self.quoteStatus = quoteStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case closed
        case title
        case userId
        case tenantId
        case priceListId
        case description
        case enrollmentId
        case individualId
        case paymentTermId
        case organizationId
        case currencyId
        case forexRate
        case firstName
        case lastName
        case companyName
        case billingEmail
        case addressLine1
        case addressLine2
        case postalCode
        case countryId
        case stateId
        case cityId
        case cartId
        case dealUnitId
        case receiverTenantId
        case effectiveTo
        case effectiveFrom
        case quoteStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(closed, forKey: .closed)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(priceListId, forKey: .priceListId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(enrollmentId, forKey: .enrollmentId)
        try container.encodeIfPresent(individualId, forKey: .individualId)
        try container.encodeIfPresent(paymentTermId, forKey: .paymentTermId)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(forexRate, forKey: .forexRate)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(companyName, forKey: .companyName)
        try container.encodeIfPresent(billingEmail, forKey: .billingEmail)
        try container.encodeIfPresent(addressLine1, forKey: .addressLine1)
        try container.encodeIfPresent(addressLine2, forKey: .addressLine2)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(cartId, forKey: .cartId)
        try container.encodeIfPresent(dealUnitId, forKey: .dealUnitId)
        try container.encodeIfPresent(receiverTenantId, forKey: .receiverTenantId)
        try container.encodeIfPresent(effectiveTo, forKey: .effectiveTo)
        try container.encodeIfPresent(effectiveFrom, forKey: .effectiveFrom)
        try container.encodeIfPresent(quoteStatus, forKey: .quoteStatus)
    }
}

