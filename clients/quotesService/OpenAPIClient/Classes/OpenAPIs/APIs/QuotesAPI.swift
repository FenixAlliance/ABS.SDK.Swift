//
// QuotesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class QuotesAPI {

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesCountGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesCountGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/QuotesService/Quotes/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2QuotesServiceQuotesCountGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<Int32Envelope> {
        let localVariablePath = "/api/v2/QuotesService/Quotes/Count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesExtendedGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtendedQuoteDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesExtendedGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/QuotesService/Quotes/Extended
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<ExtendedQuoteDtoListEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesExtendedGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<ExtendedQuoteDtoListEnvelope> {
        let localVariablePath = "/api/v2/QuotesService/Quotes/Extended"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtendedQuoteDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuoteDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/QuotesService/Quotes
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<QuoteDtoListEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<QuoteDtoListEnvelope> {
        let localVariablePath = "/api/v2/QuotesService/Quotes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuoteDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesPost(tenantId: UUID, quoteCreateDto: QuoteCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesPostWithRequestBuilder(tenantId: tenantId, quoteCreateDto: quoteCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/QuotesService/Quotes
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesPostWithRequestBuilder(tenantId: UUID, quoteCreateDto: QuoteCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        let localVariablePath = "/api/v2/QuotesService/Quotes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: quoteCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdCalculatePut(tenantId: UUID, quoteId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdCalculatePutWithRequestBuilder(tenantId: tenantId, quoteId: quoteId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/QuotesService/Quotes/{quoteId}/Calculate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdCalculatePutWithRequestBuilder(tenantId: UUID, quoteId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Calculate"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter quoteId: (path)  
     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdDelete(quoteId: UUID, tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdDeleteWithRequestBuilder(quoteId: quoteId, tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/QuotesService/Quotes/{quoteId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter quoteId: (path)  
     - parameter tenantId: (query)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdDeleteWithRequestBuilder(quoteId: UUID, tenantId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdLinesCountGet(tenantId: UUID, quoteId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithRequestBuilder(tenantId: tenantId, quoteId: quoteId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/QuotesService/Quotes/{quoteId}/Lines/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithRequestBuilder(tenantId: UUID, quoteId: UUID) -> RequestBuilder<Int32Envelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/Count"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter itemId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdLinesGet(tenantId: UUID, quoteId: UUID, itemId: UUID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuoteLineDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdLinesGetWithRequestBuilder(tenantId: tenantId, quoteId: quoteId, itemId: itemId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/QuotesService/Quotes/{quoteId}/Lines
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter itemId: (query)  (optional)
     - returns: RequestBuilder<QuoteLineDtoListEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdLinesGetWithRequestBuilder(tenantId: UUID, quoteId: UUID, itemId: UUID? = nil) -> RequestBuilder<QuoteLineDtoListEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
            "itemId": (wrappedValue: itemId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuoteLineDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdLinesPost(tenantId: UUID, quoteId: UUID, quoteLineCreateDto: QuoteLineCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdLinesPostWithRequestBuilder(tenantId: tenantId, quoteId: quoteId, quoteLineCreateDto: quoteLineCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/QuotesService/Quotes/{quoteId}/Lines
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdLinesPostWithRequestBuilder(tenantId: UUID, quoteId: UUID, quoteLineCreateDto: QuoteLineCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: quoteLineCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(tenantId: UUID, quoteId: UUID, quoteLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithRequestBuilder(tenantId: tenantId, quoteId: quoteId, quoteLineId: quoteLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}/Calculate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithRequestBuilder(tenantId: UUID, quoteId: UUID, quoteLineId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}/Calculate"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let quoteLineIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteLineId))"
        let quoteLineIdPostEscape = quoteLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteLineId}", with: quoteLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(tenantId: UUID, quoteId: UUID, quoteLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithRequestBuilder(tenantId: tenantId, quoteId: quoteId, quoteLineId: quoteLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithRequestBuilder(tenantId: UUID, quoteId: UUID, quoteLineId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let quoteLineIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteLineId))"
        let quoteLineIdPostEscape = quoteLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteLineId}", with: quoteLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(tenantId: UUID, quoteId: UUID, quoteLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuoteLineDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithRequestBuilder(tenantId: tenantId, quoteId: quoteId, quoteLineId: quoteLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - returns: RequestBuilder<QuoteLineDtoEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithRequestBuilder(tenantId: UUID, quoteId: UUID, quoteLineId: UUID) -> RequestBuilder<QuoteLineDtoEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let quoteLineIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteLineId))"
        let quoteLineIdPostEscape = quoteLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteLineId}", with: quoteLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuoteLineDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - parameter quoteLineUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(tenantId: UUID, quoteId: UUID, quoteLineId: UUID, quoteLineUpdateDto: QuoteLineUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithRequestBuilder(tenantId: tenantId, quoteId: quoteId, quoteLineId: quoteLineId, quoteLineUpdateDto: quoteLineUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteLineId: (path)  
     - parameter quoteLineUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithRequestBuilder(tenantId: UUID, quoteId: UUID, quoteLineId: UUID, quoteLineUpdateDto: QuoteLineUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let quoteLineIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteLineId))"
        let quoteLineIdPostEscape = quoteLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteLineId}", with: quoteLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: quoteLineUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2QuotesServiceQuotesQuoteIdPut(tenantId: UUID, quoteId: UUID, quoteUpdateDto: QuoteUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2QuotesServiceQuotesQuoteIdPutWithRequestBuilder(tenantId: tenantId, quoteId: quoteId, quoteUpdateDto: quoteUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/QuotesService/Quotes/{quoteId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter quoteUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2QuotesServiceQuotesQuoteIdPutWithRequestBuilder(tenantId: UUID, quoteId: UUID, quoteUpdateDto: QuoteUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: quoteUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getQuoteAsync(tenantId: UUID, quoteId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuoteDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return getQuoteAsyncWithRequestBuilder(tenantId: tenantId, quoteId: quoteId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/QuotesService/Quotes/{quoteId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter quoteId: (path)  
     - returns: RequestBuilder<QuoteDtoEnvelope> 
     */
    open class func getQuoteAsyncWithRequestBuilder(tenantId: UUID, quoteId: UUID) -> RequestBuilder<QuoteDtoEnvelope> {
        var localVariablePath = "/api/v2/QuotesService/Quotes/{quoteId}"
        let quoteIdPreEscape = "\(APIHelper.mapValueToPathItem(quoteId))"
        let quoteIdPostEscape = quoteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{quoteId}", with: quoteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuoteDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
