//
// PaymentResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PaymentResponse: Codable, JSONEncodable, Hashable {

    public enum PaymentStatus: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
    }
    public var test: Bool?
    public var ip: String?
    public var bank: String?
    public var status: String?
    public var errors: AnyCodable?
    public var response: String?
    public var authCode: String?
    public var paymentID: String?
    public var franchise: String?
    public var signature: String?
    public var paymentStatus: PaymentStatus?

    public init(test: Bool? = nil, ip: String? = nil, bank: String? = nil, status: String? = nil, errors: AnyCodable? = nil, response: String? = nil, authCode: String? = nil, paymentID: String? = nil, franchise: String? = nil, signature: String? = nil, paymentStatus: PaymentStatus? = nil) {
        self.test = test
        self.ip = ip
        self.bank = bank
        self.status = status
        self.errors = errors
        self.response = response
        self.authCode = authCode
        self.paymentID = paymentID
        self.franchise = franchise
        self.signature = signature
        self.paymentStatus = paymentStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case test
        case ip
        case bank
        case status
        case errors
        case response
        case authCode
        case paymentID
        case franchise
        case signature
        case paymentStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(test, forKey: .test)
        try container.encodeIfPresent(ip, forKey: .ip)
        try container.encodeIfPresent(bank, forKey: .bank)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encodeIfPresent(authCode, forKey: .authCode)
        try container.encodeIfPresent(paymentID, forKey: .paymentID)
        try container.encodeIfPresent(franchise, forKey: .franchise)
        try container.encodeIfPresent(signature, forKey: .signature)
        try container.encodeIfPresent(paymentStatus, forKey: .paymentStatus)
    }
}

