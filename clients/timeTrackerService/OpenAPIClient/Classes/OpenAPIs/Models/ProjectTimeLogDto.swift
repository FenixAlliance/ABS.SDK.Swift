//
// ProjectTimeLogDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProjectTimeLogDto: Codable, JSONEncodable, Hashable {

    public enum RecordType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public var id: String?
    public var timestamp: Date?
    public var projectId: String?
    public var projectTaskId: String?
    public var taskCategoryId: String?
    public var projectPeriodId: String?
    public var responsibleContactId: String?
    public var creatorContactId: String?
    public var recordType: RecordType?
    public var timeStamp: Date?
    public var timeSpan: String?
    public var logDate: Date?
    public var comments: String?
    public var type: String?

    public init(id: String? = nil, timestamp: Date? = nil, projectId: String? = nil, projectTaskId: String? = nil, taskCategoryId: String? = nil, projectPeriodId: String? = nil, responsibleContactId: String? = nil, creatorContactId: String? = nil, recordType: RecordType? = nil, timeStamp: Date? = nil, timeSpan: String? = nil, logDate: Date? = nil, comments: String? = nil, type: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.projectId = projectId
        self.projectTaskId = projectTaskId
        self.taskCategoryId = taskCategoryId
        self.projectPeriodId = projectPeriodId
        self.responsibleContactId = responsibleContactId
        self.creatorContactId = creatorContactId
        self.recordType = recordType
        self.timeStamp = timeStamp
        self.timeSpan = timeSpan
        self.logDate = logDate
        self.comments = comments
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case projectId
        case projectTaskId
        case taskCategoryId
        case projectPeriodId
        case responsibleContactId
        case creatorContactId
        case recordType
        case timeStamp
        case timeSpan
        case logDate
        case comments
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(projectId, forKey: .projectId)
        try container.encodeIfPresent(projectTaskId, forKey: .projectTaskId)
        try container.encodeIfPresent(taskCategoryId, forKey: .taskCategoryId)
        try container.encodeIfPresent(projectPeriodId, forKey: .projectPeriodId)
        try container.encodeIfPresent(responsibleContactId, forKey: .responsibleContactId)
        try container.encodeIfPresent(creatorContactId, forKey: .creatorContactId)
        try container.encodeIfPresent(recordType, forKey: .recordType)
        try container.encodeIfPresent(timeStamp, forKey: .timeStamp)
        try container.encodeIfPresent(timeSpan, forKey: .timeSpan)
        try container.encodeIfPresent(logDate, forKey: .logDate)
        try container.encodeIfPresent(comments, forKey: .comments)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

