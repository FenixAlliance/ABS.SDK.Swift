//
// ProjectTimeLogUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProjectTimeLogUpdateDto: Codable, JSONEncodable, Hashable {

    public enum ProjectTimeLogRecordType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public var logDate: Date?
    public var timeSpan: String?
    public var comments: String?
    public var projectTaskID: String?
    public var projectPeriodID: String?
    public var projectTimeLogRecordType: ProjectTimeLogRecordType?

    public init(logDate: Date? = nil, timeSpan: String? = nil, comments: String? = nil, projectTaskID: String? = nil, projectPeriodID: String? = nil, projectTimeLogRecordType: ProjectTimeLogRecordType? = nil) {
        self.logDate = logDate
        self.timeSpan = timeSpan
        self.comments = comments
        self.projectTaskID = projectTaskID
        self.projectPeriodID = projectPeriodID
        self.projectTimeLogRecordType = projectTimeLogRecordType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case logDate
        case timeSpan
        case comments
        case projectTaskID
        case projectPeriodID
        case projectTimeLogRecordType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(logDate, forKey: .logDate)
        try container.encodeIfPresent(timeSpan, forKey: .timeSpan)
        try container.encodeIfPresent(comments, forKey: .comments)
        try container.encodeIfPresent(projectTaskID, forKey: .projectTaskID)
        try container.encodeIfPresent(projectPeriodID, forKey: .projectPeriodID)
        try container.encodeIfPresent(projectTimeLogRecordType, forKey: .projectTimeLogRecordType)
    }
}

