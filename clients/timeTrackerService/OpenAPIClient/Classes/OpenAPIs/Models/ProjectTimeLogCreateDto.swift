//
// ProjectTimeLogCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProjectTimeLogCreateDto: Codable, JSONEncodable, Hashable {

    public enum ProjectTimeLogRecordType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    static let projectTaskIDRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let projectPeriodIDRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: UUID?
    public var timestamp: Date?
    public var timeSpan: String?
    public var logDate: Date?
    public var comments: String?
    public var projectTaskID: String
    public var projectPeriodID: String
    public var projectTimeLogRecordType: ProjectTimeLogRecordType?
    public var projectID: String?

    public init(id: UUID? = nil, timestamp: Date? = nil, timeSpan: String? = nil, logDate: Date? = nil, comments: String? = nil, projectTaskID: String, projectPeriodID: String, projectTimeLogRecordType: ProjectTimeLogRecordType? = nil, projectID: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.timeSpan = timeSpan
        self.logDate = logDate
        self.comments = comments
        self.projectTaskID = projectTaskID
        self.projectPeriodID = projectPeriodID
        self.projectTimeLogRecordType = projectTimeLogRecordType
        self.projectID = projectID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case timeSpan
        case logDate
        case comments
        case projectTaskID
        case projectPeriodID
        case projectTimeLogRecordType
        case projectID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(timeSpan, forKey: .timeSpan)
        try container.encodeIfPresent(logDate, forKey: .logDate)
        try container.encodeIfPresent(comments, forKey: .comments)
        try container.encode(projectTaskID, forKey: .projectTaskID)
        try container.encode(projectPeriodID, forKey: .projectPeriodID)
        try container.encodeIfPresent(projectTimeLogRecordType, forKey: .projectTimeLogRecordType)
        try container.encodeIfPresent(projectID, forKey: .projectID)
    }
}

