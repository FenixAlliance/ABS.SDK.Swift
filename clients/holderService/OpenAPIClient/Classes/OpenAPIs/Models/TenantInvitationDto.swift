//
// TenantInvitationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TenantInvitationDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var tenantId: String?
    public var revoked: Bool?
    public var redeemed: Bool?
    public var redeemedTimestamp: Date?
    public var userEmail: String?
    public var creatorEnrollmentId: String?
    public var relatedEnrollmentId: String?

    public init(id: String? = nil, timestamp: Date? = nil, tenantId: String? = nil, revoked: Bool? = nil, redeemed: Bool? = nil, redeemedTimestamp: Date? = nil, userEmail: String? = nil, creatorEnrollmentId: String? = nil, relatedEnrollmentId: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.tenantId = tenantId
        self.revoked = revoked
        self.redeemed = redeemed
        self.redeemedTimestamp = redeemedTimestamp
        self.userEmail = userEmail
        self.creatorEnrollmentId = creatorEnrollmentId
        self.relatedEnrollmentId = relatedEnrollmentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case tenantId
        case revoked
        case redeemed
        case redeemedTimestamp
        case userEmail
        case creatorEnrollmentId
        case relatedEnrollmentId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(revoked, forKey: .revoked)
        try container.encodeIfPresent(redeemed, forKey: .redeemed)
        try container.encodeIfPresent(redeemedTimestamp, forKey: .redeemedTimestamp)
        try container.encodeIfPresent(userEmail, forKey: .userEmail)
        try container.encodeIfPresent(creatorEnrollmentId, forKey: .creatorEnrollmentId)
        try container.encodeIfPresent(relatedEnrollmentId, forKey: .relatedEnrollmentId)
    }
}

