//
// UserSettingsUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserSettingsUpdateDto: Codable, JSONEncodable, Hashable {

    public enum SiteTheme: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    static let pageSizeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 1000, exclusiveMaximum: false, multipleOf: nil)
    static let dateFormatRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let currencyFormatRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let dateTimeFormatRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var pageSize: Int?
    public var dateFormat: String
    public var currencyFormat: String
    public var dateTimeFormat: String
    public var siteTheme: SiteTheme

    public init(pageSize: Int? = nil, dateFormat: String, currencyFormat: String, dateTimeFormat: String, siteTheme: SiteTheme) {
        self.pageSize = pageSize
        self.dateFormat = dateFormat
        self.currencyFormat = currencyFormat
        self.dateTimeFormat = dateTimeFormat
        self.siteTheme = siteTheme
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pageSize
        case dateFormat
        case currencyFormat
        case dateTimeFormat
        case siteTheme
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encode(dateFormat, forKey: .dateFormat)
        try container.encode(currencyFormat, forKey: .currencyFormat)
        try container.encode(dateTimeFormat, forKey: .dateTimeFormat)
        try container.encode(siteTheme, forKey: .siteTheme)
    }
}

