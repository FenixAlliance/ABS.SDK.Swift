//
// ExtendedTenantEnrolmentDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExtendedTenantEnrolmentDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var tenantId: String?
    public var userId: String?
    public var isRoot: Bool?
    public var isOwner: Bool?
    public var isAdmin: Bool?
    public var isDisabled: Bool?
    public var tenant: TenantDto?
    public var user: UserDto?

    public init(id: String? = nil, timestamp: Date? = nil, tenantId: String? = nil, userId: String? = nil, isRoot: Bool? = nil, isOwner: Bool? = nil, isAdmin: Bool? = nil, isDisabled: Bool? = nil, tenant: TenantDto? = nil, user: UserDto? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.tenantId = tenantId
        self.userId = userId
        self.isRoot = isRoot
        self.isOwner = isOwner
        self.isAdmin = isAdmin
        self.isDisabled = isDisabled
        self.tenant = tenant
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case tenantId
        case userId
        case isRoot
        case isOwner
        case isAdmin
        case isDisabled
        case tenant
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(isRoot, forKey: .isRoot)
        try container.encodeIfPresent(isOwner, forKey: .isOwner)
        try container.encodeIfPresent(isAdmin, forKey: .isAdmin)
        try container.encodeIfPresent(isDisabled, forKey: .isDisabled)
        try container.encodeIfPresent(tenant, forKey: .tenant)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

