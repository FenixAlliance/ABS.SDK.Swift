//
// BlobsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BlobsAPI {

    /**

     - parameter tenantId: (query)  (optional)
     - parameter filePath: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - parameter xApiVersion: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlobAsync(tenantId: UUID? = nil, filePath: String? = nil, apiVersion: String? = nil, xApiVersion: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlobEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlobAsyncWithRequestBuilder(tenantId: tenantId, filePath: filePath, apiVersion: apiVersion, xApiVersion: xApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/StorageService/Blobs/Single
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  (optional)
     - parameter filePath: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - parameter xApiVersion: (header)  (optional)
     - returns: RequestBuilder<BlobEnvelope> 
     */
    open class func getBlobAsyncWithRequestBuilder(tenantId: UUID? = nil, filePath: String? = nil, apiVersion: String? = nil, xApiVersion: String? = nil) -> RequestBuilder<BlobEnvelope> {
        let localVariablePath = "/api/v2/StorageService/Blobs/Single"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId?.encodeToJSON(), isExplode: true),
            "filePath": (wrappedValue: filePath?.encodeToJSON(), isExplode: true),
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "x-api-version": xApiVersion?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlobEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  (optional)
     - parameter folderPath: (query)  (optional)
     - parameter browseFilter: (query)  (optional)
     - parameter filePrefix: (query)  (optional)
     - parameter recurse: (query)  (optional)
     - parameter maxResults: (query)  (optional)
     - parameter includeAttributes: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - parameter xApiVersion: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlobsAsync(tenantId: UUID? = nil, folderPath: String? = nil, browseFilter: String? = nil, filePrefix: String? = nil, recurse: Bool? = nil, maxResults: Int? = nil, includeAttributes: Bool? = nil, apiVersion: String? = nil, xApiVersion: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BlobEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlobsAsyncWithRequestBuilder(tenantId: tenantId, folderPath: folderPath, browseFilter: browseFilter, filePrefix: filePrefix, recurse: recurse, maxResults: maxResults, includeAttributes: includeAttributes, apiVersion: apiVersion, xApiVersion: xApiVersion).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/StorageService/Blobs
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  (optional)
     - parameter folderPath: (query)  (optional)
     - parameter browseFilter: (query)  (optional)
     - parameter filePrefix: (query)  (optional)
     - parameter recurse: (query)  (optional)
     - parameter maxResults: (query)  (optional)
     - parameter includeAttributes: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - parameter xApiVersion: (header)  (optional)
     - returns: RequestBuilder<BlobEnvelope> 
     */
    open class func getBlobsAsyncWithRequestBuilder(tenantId: UUID? = nil, folderPath: String? = nil, browseFilter: String? = nil, filePrefix: String? = nil, recurse: Bool? = nil, maxResults: Int? = nil, includeAttributes: Bool? = nil, apiVersion: String? = nil, xApiVersion: String? = nil) -> RequestBuilder<BlobEnvelope> {
        let localVariablePath = "/api/v2/StorageService/Blobs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId?.encodeToJSON(), isExplode: true),
            "folderPath": (wrappedValue: folderPath?.encodeToJSON(), isExplode: true),
            "browseFilter": (wrappedValue: browseFilter?.encodeToJSON(), isExplode: true),
            "filePrefix": (wrappedValue: filePrefix?.encodeToJSON(), isExplode: true),
            "recurse": (wrappedValue: recurse?.encodeToJSON(), isExplode: true),
            "maxResults": (wrappedValue: maxResults?.encodeToJSON(), isExplode: true),
            "includeAttributes": (wrappedValue: includeAttributes?.encodeToJSON(), isExplode: true),
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "x-api-version": xApiVersion?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlobEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
