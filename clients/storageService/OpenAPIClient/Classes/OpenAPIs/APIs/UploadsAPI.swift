//
// UploadsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UploadsAPI {

    /**

     - parameter tenantId: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - parameter xApiVersion: (header)  (optional)
     - parameter notes: (form)  (optional)
     - parameter title: (form)  (optional)
     - parameter author: (form)  (optional)
     - parameter isFolder: (form)  (optional)
     - parameter fileName: (form)  (optional)
     - parameter abstract: (form)  (optional)
     - parameter keyWords: (form)  (optional)
     - parameter validResponse: (form)  (optional)
     - parameter parentFileUploadId: (form)  (optional)
     - parameter filePath: (form)  (optional)
     - parameter file: (form)  (optional)
     - parameter iD: (form)  (optional)
     - parameter timestamp: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2StorageServiceUploadsPost(tenantId: UUID? = nil, apiVersion: String? = nil, xApiVersion: String? = nil, notes: String? = nil, title: String? = nil, author: String? = nil, isFolder: Bool? = nil, fileName: String? = nil, abstract: String? = nil, keyWords: String? = nil, validResponse: Bool? = nil, parentFileUploadId: String? = nil, filePath: String? = nil, file: URL? = nil, iD: UUID? = nil, timestamp: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2StorageServiceUploadsPostWithRequestBuilder(tenantId: tenantId, apiVersion: apiVersion, xApiVersion: xApiVersion, notes: notes, title: title, author: author, isFolder: isFolder, fileName: fileName, abstract: abstract, keyWords: keyWords, validResponse: validResponse, parentFileUploadId: parentFileUploadId, filePath: filePath, file: file, iD: iD, timestamp: timestamp).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/StorageService/Uploads
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - parameter xApiVersion: (header)  (optional)
     - parameter notes: (form)  (optional)
     - parameter title: (form)  (optional)
     - parameter author: (form)  (optional)
     - parameter isFolder: (form)  (optional)
     - parameter fileName: (form)  (optional)
     - parameter abstract: (form)  (optional)
     - parameter keyWords: (form)  (optional)
     - parameter validResponse: (form)  (optional)
     - parameter parentFileUploadId: (form)  (optional)
     - parameter filePath: (form)  (optional)
     - parameter file: (form)  (optional)
     - parameter iD: (form)  (optional)
     - parameter timestamp: (form)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2StorageServiceUploadsPostWithRequestBuilder(tenantId: UUID? = nil, apiVersion: String? = nil, xApiVersion: String? = nil, notes: String? = nil, title: String? = nil, author: String? = nil, isFolder: Bool? = nil, fileName: String? = nil, abstract: String? = nil, keyWords: String? = nil, validResponse: Bool? = nil, parentFileUploadId: String? = nil, filePath: String? = nil, file: URL? = nil, iD: UUID? = nil, timestamp: Date? = nil) -> RequestBuilder<EmptyEnvelope> {
        let localVariablePath = "/api/v2/StorageService/Uploads"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "notes": notes?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "author": author?.encodeToJSON(),
            "isFolder": isFolder?.encodeToJSON(),
            "fileName": fileName?.encodeToJSON(),
            "abstract": abstract?.encodeToJSON(),
            "keyWords": keyWords?.encodeToJSON(),
            "validResponse": validResponse?.encodeToJSON(),
            "parentFileUploadId": parentFileUploadId?.encodeToJSON(),
            "filePath": filePath?.encodeToJSON(),
            "file": file?.encodeToJSON(),
            "iD": iD?.encodeToJSON(),
            "timestamp": timestamp?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId?.encodeToJSON(), isExplode: true),
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
            "x-api-version": xApiVersion?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
