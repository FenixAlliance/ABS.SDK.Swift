//
// NotificationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NotificationDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var read: Bool?
    public var icon: String?
    public var message: String?
    public var redirectUrl: String?
    public var socialProfileID: String?
    public var readTimestamp: Date?
    public var issuedTimestamp: Date?

    public init(id: String? = nil, timestamp: Date? = nil, read: Bool? = nil, icon: String? = nil, message: String? = nil, redirectUrl: String? = nil, socialProfileID: String? = nil, readTimestamp: Date? = nil, issuedTimestamp: Date? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.read = read
        self.icon = icon
        self.message = message
        self.redirectUrl = redirectUrl
        self.socialProfileID = socialProfileID
        self.readTimestamp = readTimestamp
        self.issuedTimestamp = issuedTimestamp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case read
        case icon
        case message
        case redirectUrl
        case socialProfileID
        case readTimestamp
        case issuedTimestamp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(read, forKey: .read)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(redirectUrl, forKey: .redirectUrl)
        try container.encodeIfPresent(socialProfileID, forKey: .socialProfileID)
        try container.encodeIfPresent(readTimestamp, forKey: .readTimestamp)
        try container.encodeIfPresent(issuedTimestamp, forKey: .issuedTimestamp)
    }
}

