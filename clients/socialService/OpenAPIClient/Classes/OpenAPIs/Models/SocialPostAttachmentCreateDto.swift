//
// SocialPostAttachmentCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SocialPostAttachmentCreateDto: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var timestamp: Date?
    public var notes: String?
    public var title: String?
    public var author: String?
    public var isFolder: Bool?
    public var fileName: String?
    public var abstract: String?
    public var keyWords: String?
    public var validResponse: Bool?
    public var parentFileUploadId: String?
    public var filePath: String?
    public var file: URL?
    public var socialPostId: String?

    public init(id: UUID? = nil, timestamp: Date? = nil, notes: String? = nil, title: String? = nil, author: String? = nil, isFolder: Bool? = nil, fileName: String? = nil, abstract: String? = nil, keyWords: String? = nil, validResponse: Bool? = nil, parentFileUploadId: String? = nil, filePath: String? = nil, file: URL? = nil, socialPostId: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.notes = notes
        self.title = title
        self.author = author
        self.isFolder = isFolder
        self.fileName = fileName
        self.abstract = abstract
        self.keyWords = keyWords
        self.validResponse = validResponse
        self.parentFileUploadId = parentFileUploadId
        self.filePath = filePath
        self.file = file
        self.socialPostId = socialPostId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case notes
        case title
        case author
        case isFolder
        case fileName
        case abstract
        case keyWords
        case validResponse
        case parentFileUploadId
        case filePath
        case file
        case socialPostId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(isFolder, forKey: .isFolder)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(abstract, forKey: .abstract)
        try container.encodeIfPresent(keyWords, forKey: .keyWords)
        try container.encodeIfPresent(validResponse, forKey: .validResponse)
        try container.encodeIfPresent(parentFileUploadId, forKey: .parentFileUploadId)
        try container.encodeIfPresent(filePath, forKey: .filePath)
        try container.encodeIfPresent(file, forKey: .file)
        try container.encodeIfPresent(socialPostId, forKey: .socialPostId)
    }
}

