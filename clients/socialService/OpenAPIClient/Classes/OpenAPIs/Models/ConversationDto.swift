//
// ConversationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConversationDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var subject: String?
    public var socialProfileId: String?
    public var startedTimestamp: Date?
    public var lastMessageTimestamp: Date?
    public var lastMessage: String?
    public var socialProfileName: String?
    public var socialProfileAvatarUrl: String?

    public init(id: String? = nil, timestamp: Date? = nil, subject: String? = nil, socialProfileId: String? = nil, startedTimestamp: Date? = nil, lastMessageTimestamp: Date? = nil, lastMessage: String? = nil, socialProfileName: String? = nil, socialProfileAvatarUrl: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.subject = subject
        self.socialProfileId = socialProfileId
        self.startedTimestamp = startedTimestamp
        self.lastMessageTimestamp = lastMessageTimestamp
        self.lastMessage = lastMessage
        self.socialProfileName = socialProfileName
        self.socialProfileAvatarUrl = socialProfileAvatarUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case subject
        case socialProfileId
        case startedTimestamp
        case lastMessageTimestamp
        case lastMessage
        case socialProfileName
        case socialProfileAvatarUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(socialProfileId, forKey: .socialProfileId)
        try container.encodeIfPresent(startedTimestamp, forKey: .startedTimestamp)
        try container.encodeIfPresent(lastMessageTimestamp, forKey: .lastMessageTimestamp)
        try container.encodeIfPresent(lastMessage, forKey: .lastMessage)
        try container.encodeIfPresent(socialProfileName, forKey: .socialProfileName)
        try container.encodeIfPresent(socialProfileAvatarUrl, forKey: .socialProfileAvatarUrl)
    }
}

