//
// MarketingCampaignCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MarketingCampaignCreateDto: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var timestamp: Date?
    public var name: String?
    public var offer: String?
    public var active: Bool?
    public var proposedStart: Date?
    public var proposedEnd: Date?
    public var actualStart: Date?
    public var actualEnd: Date?
    public var code: String?
    public var allocatedBudget: Double?
    public var activityCost: Double?
    public var miscCost: Double?
    public var expectedResponsePercent: Double?
    public var marketingAreaId: String?
    public var currencyId: String?
    public var tenantId: String?
    public var enrolmentId: String?

    public init(id: UUID? = nil, timestamp: Date? = nil, name: String? = nil, offer: String? = nil, active: Bool? = nil, proposedStart: Date? = nil, proposedEnd: Date? = nil, actualStart: Date? = nil, actualEnd: Date? = nil, code: String? = nil, allocatedBudget: Double? = nil, activityCost: Double? = nil, miscCost: Double? = nil, expectedResponsePercent: Double? = nil, marketingAreaId: String? = nil, currencyId: String? = nil, tenantId: String? = nil, enrolmentId: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.name = name
        self.offer = offer
        self.active = active
        self.proposedStart = proposedStart
        self.proposedEnd = proposedEnd
        self.actualStart = actualStart
        self.actualEnd = actualEnd
        self.code = code
        self.allocatedBudget = allocatedBudget
        self.activityCost = activityCost
        self.miscCost = miscCost
        self.expectedResponsePercent = expectedResponsePercent
        self.marketingAreaId = marketingAreaId
        self.currencyId = currencyId
        self.tenantId = tenantId
        self.enrolmentId = enrolmentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case name
        case offer
        case active
        case proposedStart
        case proposedEnd
        case actualStart
        case actualEnd
        case code
        case allocatedBudget
        case activityCost
        case miscCost
        case expectedResponsePercent
        case marketingAreaId
        case currencyId
        case tenantId
        case enrolmentId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(offer, forKey: .offer)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(proposedStart, forKey: .proposedStart)
        try container.encodeIfPresent(proposedEnd, forKey: .proposedEnd)
        try container.encodeIfPresent(actualStart, forKey: .actualStart)
        try container.encodeIfPresent(actualEnd, forKey: .actualEnd)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(allocatedBudget, forKey: .allocatedBudget)
        try container.encodeIfPresent(activityCost, forKey: .activityCost)
        try container.encodeIfPresent(miscCost, forKey: .miscCost)
        try container.encodeIfPresent(expectedResponsePercent, forKey: .expectedResponsePercent)
        try container.encodeIfPresent(marketingAreaId, forKey: .marketingAreaId)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(enrolmentId, forKey: .enrolmentId)
    }
}

