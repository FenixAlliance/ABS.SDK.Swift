//
// EmailTemplateCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EmailTemplateCreateDto: Codable, JSONEncodable, Hashable {

    static let marketingCampaignIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    public var id: UUID?
    public var timestamp: Date?
    public var tenantId: String?
    public var enrolmentId: String?
    public var title: String?
    public var authorId: String?
    public var description: String?
    public var htmlContent: String?
    public var featuredImageUrl: String?
    public var marketingCampaignId: String?

    public init(id: UUID? = nil, timestamp: Date? = nil, tenantId: String? = nil, enrolmentId: String? = nil, title: String? = nil, authorId: String? = nil, description: String? = nil, htmlContent: String? = nil, featuredImageUrl: String? = nil, marketingCampaignId: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.tenantId = tenantId
        self.enrolmentId = enrolmentId
        self.title = title
        self.authorId = authorId
        self.description = description
        self.htmlContent = htmlContent
        self.featuredImageUrl = featuredImageUrl
        self.marketingCampaignId = marketingCampaignId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case tenantId
        case enrolmentId
        case title
        case authorId
        case description
        case htmlContent
        case featuredImageUrl
        case marketingCampaignId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(enrolmentId, forKey: .enrolmentId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(authorId, forKey: .authorId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(htmlContent, forKey: .htmlContent)
        try container.encodeIfPresent(featuredImageUrl, forKey: .featuredImageUrl)
        try container.encodeIfPresent(marketingCampaignId, forKey: .marketingCampaignId)
    }
}

