//
// TenantDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TenantDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var qualifiedName: String?
    public var taxId: String?
    public var about: String?
    public var walletId: String?
    public var socialFeedId: String?
    public var businessIndustryId: String?
    public var businessSegmentId: String?
    public var socialProfileId: String?
    public var languageId: String?
    public var name: String?
    public var duns: String?
    public var slogan: String?
    public var legalName: String?
    public var coverUrl: String?
    public var avatarUrl: String?
    public var cartId: String?
    public var currencyId: String?
    public var timezoneId: String?
    public var countryId: String?
    public var stateId: String?
    public var cityId: String?
    public var email: String?
    public var phone: String?
    public var webUrl: String?
    public var facebookUrl: String?
    public var twitterUrl: String?
    public var gitHubUrl: String?
    public var linkedInUrl: String?
    public var instagramUrl: String?
    public var youTubeUrl: String?
    public var whatsAppNumber: String?
    public var supportPhoneNumber: String?
    public var verified: Bool?
    public var businessName: String?
    public var businessLegalName: String?
    public var twitterUsername: String?

    public init(id: String? = nil, timestamp: Date? = nil, qualifiedName: String? = nil, taxId: String? = nil, about: String? = nil, walletId: String? = nil, socialFeedId: String? = nil, businessIndustryId: String? = nil, businessSegmentId: String? = nil, socialProfileId: String? = nil, languageId: String? = nil, name: String? = nil, duns: String? = nil, slogan: String? = nil, legalName: String? = nil, coverUrl: String? = nil, avatarUrl: String? = nil, cartId: String? = nil, currencyId: String? = nil, timezoneId: String? = nil, countryId: String? = nil, stateId: String? = nil, cityId: String? = nil, email: String? = nil, phone: String? = nil, webUrl: String? = nil, facebookUrl: String? = nil, twitterUrl: String? = nil, gitHubUrl: String? = nil, linkedInUrl: String? = nil, instagramUrl: String? = nil, youTubeUrl: String? = nil, whatsAppNumber: String? = nil, supportPhoneNumber: String? = nil, verified: Bool? = nil, businessName: String? = nil, businessLegalName: String? = nil, twitterUsername: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.qualifiedName = qualifiedName
        self.taxId = taxId
        self.about = about
        self.walletId = walletId
        self.socialFeedId = socialFeedId
        self.businessIndustryId = businessIndustryId
        self.businessSegmentId = businessSegmentId
        self.socialProfileId = socialProfileId
        self.languageId = languageId
        self.name = name
        self.duns = duns
        self.slogan = slogan
        self.legalName = legalName
        self.coverUrl = coverUrl
        self.avatarUrl = avatarUrl
        self.cartId = cartId
        self.currencyId = currencyId
        self.timezoneId = timezoneId
        self.countryId = countryId
        self.stateId = stateId
        self.cityId = cityId
        self.email = email
        self.phone = phone
        self.webUrl = webUrl
        self.facebookUrl = facebookUrl
        self.twitterUrl = twitterUrl
        self.gitHubUrl = gitHubUrl
        self.linkedInUrl = linkedInUrl
        self.instagramUrl = instagramUrl
        self.youTubeUrl = youTubeUrl
        self.whatsAppNumber = whatsAppNumber
        self.supportPhoneNumber = supportPhoneNumber
        self.verified = verified
        self.businessName = businessName
        self.businessLegalName = businessLegalName
        self.twitterUsername = twitterUsername
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case qualifiedName
        case taxId
        case about
        case walletId
        case socialFeedId
        case businessIndustryId
        case businessSegmentId
        case socialProfileId
        case languageId
        case name
        case duns
        case slogan
        case legalName
        case coverUrl
        case avatarUrl
        case cartId
        case currencyId
        case timezoneId
        case countryId
        case stateId
        case cityId
        case email
        case phone
        case webUrl
        case facebookUrl
        case twitterUrl
        case gitHubUrl
        case linkedInUrl
        case instagramUrl
        case youTubeUrl
        case whatsAppNumber
        case supportPhoneNumber
        case verified
        case businessName
        case businessLegalName
        case twitterUsername
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(qualifiedName, forKey: .qualifiedName)
        try container.encodeIfPresent(taxId, forKey: .taxId)
        try container.encodeIfPresent(about, forKey: .about)
        try container.encodeIfPresent(walletId, forKey: .walletId)
        try container.encodeIfPresent(socialFeedId, forKey: .socialFeedId)
        try container.encodeIfPresent(businessIndustryId, forKey: .businessIndustryId)
        try container.encodeIfPresent(businessSegmentId, forKey: .businessSegmentId)
        try container.encodeIfPresent(socialProfileId, forKey: .socialProfileId)
        try container.encodeIfPresent(languageId, forKey: .languageId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(duns, forKey: .duns)
        try container.encodeIfPresent(slogan, forKey: .slogan)
        try container.encodeIfPresent(legalName, forKey: .legalName)
        try container.encodeIfPresent(coverUrl, forKey: .coverUrl)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(cartId, forKey: .cartId)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(timezoneId, forKey: .timezoneId)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(webUrl, forKey: .webUrl)
        try container.encodeIfPresent(facebookUrl, forKey: .facebookUrl)
        try container.encodeIfPresent(twitterUrl, forKey: .twitterUrl)
        try container.encodeIfPresent(gitHubUrl, forKey: .gitHubUrl)
        try container.encodeIfPresent(linkedInUrl, forKey: .linkedInUrl)
        try container.encodeIfPresent(instagramUrl, forKey: .instagramUrl)
        try container.encodeIfPresent(youTubeUrl, forKey: .youTubeUrl)
        try container.encodeIfPresent(whatsAppNumber, forKey: .whatsAppNumber)
        try container.encodeIfPresent(supportPhoneNumber, forKey: .supportPhoneNumber)
        try container.encodeIfPresent(verified, forKey: .verified)
        try container.encodeIfPresent(businessName, forKey: .businessName)
        try container.encodeIfPresent(businessLegalName, forKey: .businessLegalName)
        try container.encodeIfPresent(twitterUsername, forKey: .twitterUsername)
    }
}

