//
// DealUnitFlowCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DealUnitFlowCreateDto: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 0, maxLength: 100, pattern: nil)
    static let descriptionRule = StringRule(minLength: 0, maxLength: 1000, pattern: nil)
    static let parentBusinessProcessIdRule = StringRule(minLength: 36, maxLength: 36, pattern: nil)
    static let tenantIdRule = StringRule(minLength: 36, maxLength: 36, pattern: nil)
    static let tenantEnrolmentIdRule = StringRule(minLength: 36, maxLength: 36, pattern: nil)
    public var id: UUID?
    public var timestamp: Date?
    public var name: String?
    public var description: String?
    public var parentBusinessProcessId: String?
    public var tenantId: String?
    public var tenantEnrolmentId: String?

    public init(id: UUID? = nil, timestamp: Date? = nil, name: String? = nil, description: String? = nil, parentBusinessProcessId: String? = nil, tenantId: String? = nil, tenantEnrolmentId: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.name = name
        self.description = description
        self.parentBusinessProcessId = parentBusinessProcessId
        self.tenantId = tenantId
        self.tenantEnrolmentId = tenantEnrolmentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case name
        case description
        case parentBusinessProcessId
        case tenantId
        case tenantEnrolmentId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(parentBusinessProcessId, forKey: .parentBusinessProcessId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(tenantEnrolmentId, forKey: .tenantEnrolmentId)
    }
}

