//
// DealUnitsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DealUnitsAPI {

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsCountGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsCountGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2DealsServiceDealUnitsCountGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<Int32Envelope> {
        let localVariablePath = "/api/v2/DealsService/DealUnits/Count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdCalculatePut(tenantId: UUID, dealUnitId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/DealsService/DealUnits/{dealUnitId}/Calculate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithRequestBuilder(tenantId: UUID, dealUnitId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Calculate"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdDelete(tenantId: UUID, dealUnitId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdDeleteWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/DealsService/DealUnits/{dealUnitId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdDeleteWithRequestBuilder(tenantId: UUID, dealUnitId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdExtendedGet(tenantId: UUID, dealUnitId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtendedDealUnitDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits/{dealUnitId}/Extended
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - returns: RequestBuilder<ExtendedDealUnitDtoEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithRequestBuilder(tenantId: UUID, dealUnitId: UUID) -> RequestBuilder<ExtendedDealUnitDtoEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Extended"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtendedDealUnitDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet(tenantId: UUID, dealUnitId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits/{dealUnitId}/Lines/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithRequestBuilder(tenantId: UUID, dealUnitId: UUID) -> RequestBuilder<Int32Envelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/Count"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId, dealUnitLineId: dealUnitLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}/Calculate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithRequestBuilder(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}/Calculate"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let dealUnitLineIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitLineId))"
        let dealUnitLineIdPostEscape = dealUnitLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitLineId}", with: dealUnitLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId, dealUnitLineId: dealUnitLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithRequestBuilder(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let dealUnitLineIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitLineId))"
        let dealUnitLineIdPostEscape = dealUnitLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitLineId}", with: dealUnitLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DealUnitLineDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId, dealUnitLineId: dealUnitLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - returns: RequestBuilder<DealUnitLineDtoEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithRequestBuilder(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID) -> RequestBuilder<DealUnitLineDtoEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let dealUnitLineIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitLineId))"
        let dealUnitLineIdPostEscape = dealUnitLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitLineId}", with: dealUnitLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DealUnitLineDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - parameter dealUnitLineUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID, dealUnitLineUpdateDto: DealUnitLineUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId, dealUnitLineId: dealUnitLineId, dealUnitLineUpdateDto: dealUnitLineUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineId: (path)  
     - parameter dealUnitLineUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithRequestBuilder(tenantId: UUID, dealUnitId: UUID, dealUnitLineId: UUID, dealUnitLineUpdateDto: DealUnitLineUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let dealUnitLineIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitLineId))"
        let dealUnitLineIdPostEscape = dealUnitLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitLineId}", with: dealUnitLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dealUnitLineUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter itemId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesGet(tenantId: UUID, dealUnitId: UUID, itemId: UUID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DealUnitLineDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId, itemId: itemId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits/{dealUnitId}/Lines
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter itemId: (query)  (optional)
     - returns: RequestBuilder<DealUnitLineDtoListEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithRequestBuilder(tenantId: UUID, dealUnitId: UUID, itemId: UUID? = nil) -> RequestBuilder<DealUnitLineDtoListEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
            "itemId": (wrappedValue: itemId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DealUnitLineDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesPost(tenantId: UUID, dealUnitId: UUID, dealUnitLineCreateDto: DealUnitLineCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId, dealUnitLineCreateDto: dealUnitLineCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/DealsService/DealUnits/{dealUnitId}/Lines
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitLineCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithRequestBuilder(tenantId: UUID, dealUnitId: UUID, dealUnitLineCreateDto: DealUnitLineCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dealUnitLineCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsDealUnitIdPut(tenantId: UUID, dealUnitId: UUID, dealUnitUpdateDto: DealUnitUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsDealUnitIdPutWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId, dealUnitUpdateDto: dealUnitUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/DealsService/DealUnits/{dealUnitId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter dealUnitUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsDealUnitIdPutWithRequestBuilder(tenantId: UUID, dealUnitId: UUID, dealUnitUpdateDto: DealUnitUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dealUnitUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsExtendedGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtendedDealUnitDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsExtendedGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits/Extended
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<ExtendedDealUnitDtoListEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsExtendedGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<ExtendedDealUnitDtoListEnvelope> {
        let localVariablePath = "/api/v2/DealsService/DealUnits/Extended"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtendedDealUnitDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DealUnitDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<DealUnitDtoListEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<DealUnitDtoListEnvelope> {
        let localVariablePath = "/api/v2/DealsService/DealUnits"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DealUnitDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2DealsServiceDealUnitsPost(tenantId: UUID, dealUnitCreateDto: DealUnitCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2DealsServiceDealUnitsPostWithRequestBuilder(tenantId: tenantId, dealUnitCreateDto: dealUnitCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/DealsService/DealUnits
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2DealsServiceDealUnitsPostWithRequestBuilder(tenantId: UUID, dealUnitCreateDto: DealUnitCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        let localVariablePath = "/api/v2/DealsService/DealUnits"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dealUnitCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDealUnitAsync(tenantId: UUID, dealUnitId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DealUnitDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return getDealUnitAsyncWithRequestBuilder(tenantId: tenantId, dealUnitId: dealUnitId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/DealsService/DealUnits/{dealUnitId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter dealUnitId: (path)  
     - returns: RequestBuilder<DealUnitDtoEnvelope> 
     */
    open class func getDealUnitAsyncWithRequestBuilder(tenantId: UUID, dealUnitId: UUID) -> RequestBuilder<DealUnitDtoEnvelope> {
        var localVariablePath = "/api/v2/DealsService/DealUnits/{dealUnitId}"
        let dealUnitIdPreEscape = "\(APIHelper.mapValueToPathItem(dealUnitId))"
        let dealUnitIdPostEscape = dealUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dealUnitId}", with: dealUnitIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DealUnitDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
