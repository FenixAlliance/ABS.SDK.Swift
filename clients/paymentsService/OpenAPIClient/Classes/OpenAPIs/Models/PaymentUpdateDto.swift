//
// PaymentUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PaymentUpdateDto: Codable, JSONEncodable, Hashable {

    public enum OnBehalfOf: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }
    public enum PaymentType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public enum PaymentStatus: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
    }
    static let invoiceIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let tenantIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let emisorWalletIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let receiverWalletIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let countryIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let locationIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let entitlementIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let ipLookupIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let orderIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let accountingEntryIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let paymentGatewayIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let bankAccountIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let enrolmentIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let bankIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let paymentTokenIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let emisorWalletAccountIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    static let receiverWalletAccountIdRule = StringRule(minLength: 0, maxLength: 36, pattern: nil)
    public var invoiceId: String?
    public var tenantId: String?
    public var emisorWalletId: String?
    public var receiverWalletId: String?
    public var currencyId: String?
    public var forexRate: Double?
    public var totalCost: Double?
    public var totalTaxes: Double?
    public var closed: Bool?
    public var data: String?
    public var dataLabel: String?
    public var data1: String?
    public var data1Label: String?
    public var response: String?
    public var authorization: String?
    public var referenceCode: String?
    public var correlationCode: String?
    public var lastUpdated: Date?
    public var onBehalfOf: OnBehalfOf?
    public var paymentType: PaymentType?
    public var paymentStatus: PaymentStatus?
    public var baseCost: Double?
    public var signature: String?
    public var signatureMismatch: Bool?
    public var isExternal: Bool?
    public var markedForRevision: Bool?
    public var forexRatesSnapshot: String?
    public var officialId: String?
    public var officialIdExpeditionDate: Date?
    public var fiscalIdentificationTypeId: String?
    public var billingAddress: String?
    public var phone: String?
    public var cellphone: String?
    public var department: String?
    public var city: String?
    public var countryId: String?
    public var locationId: String?
    public var entitlementId: String?
    public var antiFraudScore: Double?
    public var callRecordURL: String?
    public var called: Bool?
    public var verified: Bool?
    public var payerPictureTimestamp: String?
    public var payerPicture: String?
    public var identificationPictureTimestamp: String?
    public var identificationPicture: String?
    public var identificationBackPicture: String?
    public var identificationBackPictureTimestamp: String?
    public var ipLookupId: String?
    public var orderId: String?
    public var accountingEntryId: String?
    public var paymentGatewayId: String?
    public var bankAccountId: String?
    public var enrolmentId: String?
    public var bankId: String?
    public var paymentTokenId: String?
    public var emisorWalletAccountId: String?
    public var receiverWalletAccountId: String?

    public init(invoiceId: String? = nil, tenantId: String? = nil, emisorWalletId: String? = nil, receiverWalletId: String? = nil, currencyId: String? = nil, forexRate: Double? = nil, totalCost: Double? = nil, totalTaxes: Double? = nil, closed: Bool? = nil, data: String? = nil, dataLabel: String? = nil, data1: String? = nil, data1Label: String? = nil, response: String? = nil, authorization: String? = nil, referenceCode: String? = nil, correlationCode: String? = nil, lastUpdated: Date? = nil, onBehalfOf: OnBehalfOf? = nil, paymentType: PaymentType? = nil, paymentStatus: PaymentStatus? = nil, baseCost: Double? = nil, signature: String? = nil, signatureMismatch: Bool? = nil, isExternal: Bool? = nil, markedForRevision: Bool? = nil, forexRatesSnapshot: String? = nil, officialId: String? = nil, officialIdExpeditionDate: Date? = nil, fiscalIdentificationTypeId: String? = nil, billingAddress: String? = nil, phone: String? = nil, cellphone: String? = nil, department: String? = nil, city: String? = nil, countryId: String? = nil, locationId: String? = nil, entitlementId: String? = nil, antiFraudScore: Double? = nil, callRecordURL: String? = nil, called: Bool? = nil, verified: Bool? = nil, payerPictureTimestamp: String? = nil, payerPicture: String? = nil, identificationPictureTimestamp: String? = nil, identificationPicture: String? = nil, identificationBackPicture: String? = nil, identificationBackPictureTimestamp: String? = nil, ipLookupId: String? = nil, orderId: String? = nil, accountingEntryId: String? = nil, paymentGatewayId: String? = nil, bankAccountId: String? = nil, enrolmentId: String? = nil, bankId: String? = nil, paymentTokenId: String? = nil, emisorWalletAccountId: String? = nil, receiverWalletAccountId: String? = nil) {
        self.invoiceId = invoiceId
        self.tenantId = tenantId
        self.emisorWalletId = emisorWalletId
        self.receiverWalletId = receiverWalletId
        self.currencyId = currencyId
        self.forexRate = forexRate
        self.totalCost = totalCost
        self.totalTaxes = totalTaxes
        self.closed = closed
        self.data = data
        self.dataLabel = dataLabel
        self.data1 = data1
        self.data1Label = data1Label
        self.response = response
        self.authorization = authorization
        self.referenceCode = referenceCode
        self.correlationCode = correlationCode
        self.lastUpdated = lastUpdated
        self.onBehalfOf = onBehalfOf
        self.paymentType = paymentType
        self.paymentStatus = paymentStatus
        self.baseCost = baseCost
        self.signature = signature
        self.signatureMismatch = signatureMismatch
        self.isExternal = isExternal
        self.markedForRevision = markedForRevision
        self.forexRatesSnapshot = forexRatesSnapshot
        self.officialId = officialId
        self.officialIdExpeditionDate = officialIdExpeditionDate
        self.fiscalIdentificationTypeId = fiscalIdentificationTypeId
        self.billingAddress = billingAddress
        self.phone = phone
        self.cellphone = cellphone
        self.department = department
        self.city = city
        self.countryId = countryId
        self.locationId = locationId
        self.entitlementId = entitlementId
        self.antiFraudScore = antiFraudScore
        self.callRecordURL = callRecordURL
        self.called = called
        self.verified = verified
        self.payerPictureTimestamp = payerPictureTimestamp
        self.payerPicture = payerPicture
        self.identificationPictureTimestamp = identificationPictureTimestamp
        self.identificationPicture = identificationPicture
        self.identificationBackPicture = identificationBackPicture
        self.identificationBackPictureTimestamp = identificationBackPictureTimestamp
        self.ipLookupId = ipLookupId
        self.orderId = orderId
        self.accountingEntryId = accountingEntryId
        self.paymentGatewayId = paymentGatewayId
        self.bankAccountId = bankAccountId
        self.enrolmentId = enrolmentId
        self.bankId = bankId
        self.paymentTokenId = paymentTokenId
        self.emisorWalletAccountId = emisorWalletAccountId
        self.receiverWalletAccountId = receiverWalletAccountId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case invoiceId
        case tenantId
        case emisorWalletId
        case receiverWalletId
        case currencyId
        case forexRate
        case totalCost
        case totalTaxes
        case closed
        case data
        case dataLabel
        case data1
        case data1Label
        case response
        case authorization
        case referenceCode
        case correlationCode
        case lastUpdated
        case onBehalfOf
        case paymentType
        case paymentStatus
        case baseCost
        case signature
        case signatureMismatch
        case isExternal
        case markedForRevision
        case forexRatesSnapshot
        case officialId
        case officialIdExpeditionDate
        case fiscalIdentificationTypeId
        case billingAddress
        case phone
        case cellphone
        case department
        case city
        case countryId
        case locationId
        case entitlementId
        case antiFraudScore
        case callRecordURL
        case called
        case verified
        case payerPictureTimestamp
        case payerPicture
        case identificationPictureTimestamp
        case identificationPicture
        case identificationBackPicture
        case identificationBackPictureTimestamp
        case ipLookupId
        case orderId
        case accountingEntryId
        case paymentGatewayId
        case bankAccountId
        case enrolmentId
        case bankId
        case paymentTokenId
        case emisorWalletAccountId
        case receiverWalletAccountId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(invoiceId, forKey: .invoiceId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(emisorWalletId, forKey: .emisorWalletId)
        try container.encodeIfPresent(receiverWalletId, forKey: .receiverWalletId)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(forexRate, forKey: .forexRate)
        try container.encodeIfPresent(totalCost, forKey: .totalCost)
        try container.encodeIfPresent(totalTaxes, forKey: .totalTaxes)
        try container.encodeIfPresent(closed, forKey: .closed)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(dataLabel, forKey: .dataLabel)
        try container.encodeIfPresent(data1, forKey: .data1)
        try container.encodeIfPresent(data1Label, forKey: .data1Label)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encodeIfPresent(authorization, forKey: .authorization)
        try container.encodeIfPresent(referenceCode, forKey: .referenceCode)
        try container.encodeIfPresent(correlationCode, forKey: .correlationCode)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(onBehalfOf, forKey: .onBehalfOf)
        try container.encodeIfPresent(paymentType, forKey: .paymentType)
        try container.encodeIfPresent(paymentStatus, forKey: .paymentStatus)
        try container.encodeIfPresent(baseCost, forKey: .baseCost)
        try container.encodeIfPresent(signature, forKey: .signature)
        try container.encodeIfPresent(signatureMismatch, forKey: .signatureMismatch)
        try container.encodeIfPresent(isExternal, forKey: .isExternal)
        try container.encodeIfPresent(markedForRevision, forKey: .markedForRevision)
        try container.encodeIfPresent(forexRatesSnapshot, forKey: .forexRatesSnapshot)
        try container.encodeIfPresent(officialId, forKey: .officialId)
        try container.encodeIfPresent(officialIdExpeditionDate, forKey: .officialIdExpeditionDate)
        try container.encodeIfPresent(fiscalIdentificationTypeId, forKey: .fiscalIdentificationTypeId)
        try container.encodeIfPresent(billingAddress, forKey: .billingAddress)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(cellphone, forKey: .cellphone)
        try container.encodeIfPresent(department, forKey: .department)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(locationId, forKey: .locationId)
        try container.encodeIfPresent(entitlementId, forKey: .entitlementId)
        try container.encodeIfPresent(antiFraudScore, forKey: .antiFraudScore)
        try container.encodeIfPresent(callRecordURL, forKey: .callRecordURL)
        try container.encodeIfPresent(called, forKey: .called)
        try container.encodeIfPresent(verified, forKey: .verified)
        try container.encodeIfPresent(payerPictureTimestamp, forKey: .payerPictureTimestamp)
        try container.encodeIfPresent(payerPicture, forKey: .payerPicture)
        try container.encodeIfPresent(identificationPictureTimestamp, forKey: .identificationPictureTimestamp)
        try container.encodeIfPresent(identificationPicture, forKey: .identificationPicture)
        try container.encodeIfPresent(identificationBackPicture, forKey: .identificationBackPicture)
        try container.encodeIfPresent(identificationBackPictureTimestamp, forKey: .identificationBackPictureTimestamp)
        try container.encodeIfPresent(ipLookupId, forKey: .ipLookupId)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(accountingEntryId, forKey: .accountingEntryId)
        try container.encodeIfPresent(paymentGatewayId, forKey: .paymentGatewayId)
        try container.encodeIfPresent(bankAccountId, forKey: .bankAccountId)
        try container.encodeIfPresent(enrolmentId, forKey: .enrolmentId)
        try container.encodeIfPresent(bankId, forKey: .bankId)
        try container.encodeIfPresent(paymentTokenId, forKey: .paymentTokenId)
        try container.encodeIfPresent(emisorWalletAccountId, forKey: .emisorWalletAccountId)
        try container.encodeIfPresent(receiverWalletAccountId, forKey: .receiverWalletAccountId)
    }
}

