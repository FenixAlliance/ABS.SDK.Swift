//
// UserSettingsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserSettingsDto: Codable, JSONEncodable, Hashable {

    public enum SiteTheme: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public var id: String?
    public var timestamp: Date?
    public var pageSize: Int?
    public var dateFormat: String?
    public var currencyFormat: String?
    public var dateTimeFormat: String?
    public var siteTheme: SiteTheme?

    public init(id: String? = nil, timestamp: Date? = nil, pageSize: Int? = nil, dateFormat: String? = nil, currencyFormat: String? = nil, dateTimeFormat: String? = nil, siteTheme: SiteTheme? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.pageSize = pageSize
        self.dateFormat = dateFormat
        self.currencyFormat = currencyFormat
        self.dateTimeFormat = dateTimeFormat
        self.siteTheme = siteTheme
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case pageSize
        case dateFormat
        case currencyFormat
        case dateTimeFormat
        case siteTheme
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(dateFormat, forKey: .dateFormat)
        try container.encodeIfPresent(currencyFormat, forKey: .currencyFormat)
        try container.encodeIfPresent(dateTimeFormat, forKey: .dateTimeFormat)
        try container.encodeIfPresent(siteTheme, forKey: .siteTheme)
    }
}

