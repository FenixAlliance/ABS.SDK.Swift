//
// WalletDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WalletDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var balance: Double?
    public var cryptoBalance: Double?
    public var testMode: Bool?
    public var verified: Bool?
    public var type: String?
    public var currencyId: String?
    public var forexRate: Double?
    public var balanceInUsd: Double?
    public var mainNetEtherBalance: Double?
    public var ethereumAddress: String?
    public var ethereumPublicKey: String?
    public var ethereumPrivateKey: String?
    public var rollingReservePercent: Double?

    public init(id: String? = nil, timestamp: Date? = nil, balance: Double? = nil, cryptoBalance: Double? = nil, testMode: Bool? = nil, verified: Bool? = nil, type: String? = nil, currencyId: String? = nil, forexRate: Double? = nil, balanceInUsd: Double? = nil, mainNetEtherBalance: Double? = nil, ethereumAddress: String? = nil, ethereumPublicKey: String? = nil, ethereumPrivateKey: String? = nil, rollingReservePercent: Double? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.balance = balance
        self.cryptoBalance = cryptoBalance
        self.testMode = testMode
        self.verified = verified
        self.type = type
        self.currencyId = currencyId
        self.forexRate = forexRate
        self.balanceInUsd = balanceInUsd
        self.mainNetEtherBalance = mainNetEtherBalance
        self.ethereumAddress = ethereumAddress
        self.ethereumPublicKey = ethereumPublicKey
        self.ethereumPrivateKey = ethereumPrivateKey
        self.rollingReservePercent = rollingReservePercent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case balance
        case cryptoBalance
        case testMode
        case verified
        case type
        case currencyId
        case forexRate
        case balanceInUsd
        case mainNetEtherBalance
        case ethereumAddress
        case ethereumPublicKey
        case ethereumPrivateKey
        case rollingReservePercent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(balance, forKey: .balance)
        try container.encodeIfPresent(cryptoBalance, forKey: .cryptoBalance)
        try container.encodeIfPresent(testMode, forKey: .testMode)
        try container.encodeIfPresent(verified, forKey: .verified)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(forexRate, forKey: .forexRate)
        try container.encodeIfPresent(balanceInUsd, forKey: .balanceInUsd)
        try container.encodeIfPresent(mainNetEtherBalance, forKey: .mainNetEtherBalance)
        try container.encodeIfPresent(ethereumAddress, forKey: .ethereumAddress)
        try container.encodeIfPresent(ethereumPublicKey, forKey: .ethereumPublicKey)
        try container.encodeIfPresent(ethereumPrivateKey, forKey: .ethereumPrivateKey)
        try container.encodeIfPresent(rollingReservePercent, forKey: .rollingReservePercent)
    }
}

