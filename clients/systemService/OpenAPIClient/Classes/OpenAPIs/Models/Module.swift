//
// Module.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Module: Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }
    public var enable: Bool?
    public var active: Bool?
    public var order: Int?
    public var id: String?
    public var name: String?
    public var fullName: String?
    public var description: String?
    public var type: ModelType?
    public var configuration: String?
    public var author: String?
    public var authorUrl: String?
    public var license: String?
    public var requireLicenseAcceptance: Bool?
    public var repository: String?
    public var path: String?
    public var icon: String?
    public var image: String?
    public var nuSpecPath: String?
    public var manifest: String?
    public var documentation: String?
    public var website: String?
    public var logo: String?
    public var swaggerSpec: ISwaggerSpec?
    public var swaggerSpecs: [ISwaggerSpec]?
    public var url: String?
    public var assemblyPaths: [String]?
    public var markedForDeletion: Bool?
    public var version: String?

    public init(enable: Bool? = nil, active: Bool? = nil, order: Int? = nil, id: String? = nil, name: String? = nil, fullName: String? = nil, description: String? = nil, type: ModelType? = nil, configuration: String? = nil, author: String? = nil, authorUrl: String? = nil, license: String? = nil, requireLicenseAcceptance: Bool? = nil, repository: String? = nil, path: String? = nil, icon: String? = nil, image: String? = nil, nuSpecPath: String? = nil, manifest: String? = nil, documentation: String? = nil, website: String? = nil, logo: String? = nil, swaggerSpec: ISwaggerSpec? = nil, swaggerSpecs: [ISwaggerSpec]? = nil, url: String? = nil, assemblyPaths: [String]? = nil, markedForDeletion: Bool? = nil, version: String? = nil) {
        self.enable = enable
        self.active = active
        self.order = order
        self.id = id
        self.name = name
        self.fullName = fullName
        self.description = description
        self.type = type
        self.configuration = configuration
        self.author = author
        self.authorUrl = authorUrl
        self.license = license
        self.requireLicenseAcceptance = requireLicenseAcceptance
        self.repository = repository
        self.path = path
        self.icon = icon
        self.image = image
        self.nuSpecPath = nuSpecPath
        self.manifest = manifest
        self.documentation = documentation
        self.website = website
        self.logo = logo
        self.swaggerSpec = swaggerSpec
        self.swaggerSpecs = swaggerSpecs
        self.url = url
        self.assemblyPaths = assemblyPaths
        self.markedForDeletion = markedForDeletion
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case enable
        case active
        case order
        case id
        case name
        case fullName
        case description
        case type
        case configuration
        case author
        case authorUrl
        case license
        case requireLicenseAcceptance
        case repository
        case path
        case icon
        case image
        case nuSpecPath
        case manifest
        case documentation
        case website
        case logo
        case swaggerSpec
        case swaggerSpecs
        case url
        case assemblyPaths
        case markedForDeletion
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(enable, forKey: .enable)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(authorUrl, forKey: .authorUrl)
        try container.encodeIfPresent(license, forKey: .license)
        try container.encodeIfPresent(requireLicenseAcceptance, forKey: .requireLicenseAcceptance)
        try container.encodeIfPresent(repository, forKey: .repository)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(nuSpecPath, forKey: .nuSpecPath)
        try container.encodeIfPresent(manifest, forKey: .manifest)
        try container.encodeIfPresent(documentation, forKey: .documentation)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(swaggerSpec, forKey: .swaggerSpec)
        try container.encodeIfPresent(swaggerSpecs, forKey: .swaggerSpecs)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(assemblyPaths, forKey: .assemblyPaths)
        try container.encodeIfPresent(markedForDeletion, forKey: .markedForDeletion)
        try container.encodeIfPresent(version, forKey: .version)
    }
}

