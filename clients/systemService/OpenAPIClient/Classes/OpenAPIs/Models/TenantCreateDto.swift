//
// TenantCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TenantCreateDto: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var timestamp: Date?
    public var duns: String?
    public var name: String?
    public var legalName: String?
    public var email: String?
    public var phone: String?
    public var webUrl: String?
    public var about: String?
    public var handler: String?
    public var currencyId: String?
    public var languageId: String?
    public var timezoneId: String?
    public var cityId: String?
    public var stateId: String?
    public var countryId: String?
    public var taxId: String?
    public var avatarUrl: String?

    public init(id: UUID? = nil, timestamp: Date? = nil, duns: String? = nil, name: String? = nil, legalName: String? = nil, email: String? = nil, phone: String? = nil, webUrl: String? = nil, about: String? = nil, handler: String? = nil, currencyId: String? = nil, languageId: String? = nil, timezoneId: String? = nil, cityId: String? = nil, stateId: String? = nil, countryId: String? = nil, taxId: String? = nil, avatarUrl: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.duns = duns
        self.name = name
        self.legalName = legalName
        self.email = email
        self.phone = phone
        self.webUrl = webUrl
        self.about = about
        self.handler = handler
        self.currencyId = currencyId
        self.languageId = languageId
        self.timezoneId = timezoneId
        self.cityId = cityId
        self.stateId = stateId
        self.countryId = countryId
        self.taxId = taxId
        self.avatarUrl = avatarUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case duns
        case name
        case legalName
        case email
        case phone
        case webUrl
        case about
        case handler
        case currencyId
        case languageId
        case timezoneId
        case cityId
        case stateId
        case countryId
        case taxId
        case avatarUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(duns, forKey: .duns)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(legalName, forKey: .legalName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(webUrl, forKey: .webUrl)
        try container.encodeIfPresent(about, forKey: .about)
        try container.encodeIfPresent(handler, forKey: .handler)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(languageId, forKey: .languageId)
        try container.encodeIfPresent(timezoneId, forKey: .timezoneId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(taxId, forKey: .taxId)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
    }
}

