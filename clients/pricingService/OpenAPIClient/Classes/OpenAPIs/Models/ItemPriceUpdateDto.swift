//
// ItemPriceUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ItemPriceUpdateDto: Codable, JSONEncodable, Hashable {

    public var price: Double?
    public var itemId: String?
    public var unitId: String?
    public var percent: Double?
    public var unitGroupId: String?
    public var currencyId: String?
    public var discountListId: String?
    public var roundingPolicyId: String?

    public init(price: Double? = nil, itemId: String? = nil, unitId: String? = nil, percent: Double? = nil, unitGroupId: String? = nil, currencyId: String? = nil, discountListId: String? = nil, roundingPolicyId: String? = nil) {
        self.price = price
        self.itemId = itemId
        self.unitId = unitId
        self.percent = percent
        self.unitGroupId = unitGroupId
        self.currencyId = currencyId
        self.discountListId = discountListId
        self.roundingPolicyId = roundingPolicyId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case price
        case itemId
        case unitId
        case percent
        case unitGroupId
        case currencyId
        case discountListId
        case roundingPolicyId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(unitId, forKey: .unitId)
        try container.encodeIfPresent(percent, forKey: .percent)
        try container.encodeIfPresent(unitGroupId, forKey: .unitGroupId)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(discountListId, forKey: .discountListId)
        try container.encodeIfPresent(roundingPolicyId, forKey: .roundingPolicyId)
    }
}

