//
// DiscountDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DiscountDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var description: String?
    public var value: Double?
    public var percent: Double?
    public var itemId: String?
    public var tenantId: String?
    public var enrolmentId: String?
    public var discountListId: String?
    public var endQuantity: Double?
    public var beginQuantity: Double?

    public init(id: String? = nil, timestamp: Date? = nil, description: String? = nil, value: Double? = nil, percent: Double? = nil, itemId: String? = nil, tenantId: String? = nil, enrolmentId: String? = nil, discountListId: String? = nil, endQuantity: Double? = nil, beginQuantity: Double? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.description = description
        self.value = value
        self.percent = percent
        self.itemId = itemId
        self.tenantId = tenantId
        self.enrolmentId = enrolmentId
        self.discountListId = discountListId
        self.endQuantity = endQuantity
        self.beginQuantity = beginQuantity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case description
        case value
        case percent
        case itemId
        case tenantId
        case enrolmentId
        case discountListId
        case endQuantity
        case beginQuantity
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(percent, forKey: .percent)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(enrolmentId, forKey: .enrolmentId)
        try container.encodeIfPresent(discountListId, forKey: .discountListId)
        try container.encodeIfPresent(endQuantity, forKey: .endQuantity)
        try container.encodeIfPresent(beginQuantity, forKey: .beginQuantity)
    }
}

