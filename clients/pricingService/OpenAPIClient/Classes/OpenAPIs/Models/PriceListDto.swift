//
// PriceListDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PriceListDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var name: String?
    public var startDate: Date?
    public var endDate: Date?
    public var description: String?
    public var currencyId: String?
    public var tenantId: String?
    public var unitId: String?
    public var unitGroupId: String?
    public var partnerVisible: Bool?
    public var unitOfMeasureDependant: Bool?
    public var enrolmentId: String?

    public init(id: String? = nil, timestamp: Date? = nil, name: String? = nil, startDate: Date? = nil, endDate: Date? = nil, description: String? = nil, currencyId: String? = nil, tenantId: String? = nil, unitId: String? = nil, unitGroupId: String? = nil, partnerVisible: Bool? = nil, unitOfMeasureDependant: Bool? = nil, enrolmentId: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.name = name
        self.startDate = startDate
        self.endDate = endDate
        self.description = description
        self.currencyId = currencyId
        self.tenantId = tenantId
        self.unitId = unitId
        self.unitGroupId = unitGroupId
        self.partnerVisible = partnerVisible
        self.unitOfMeasureDependant = unitOfMeasureDependant
        self.enrolmentId = enrolmentId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case name
        case startDate
        case endDate
        case description
        case currencyId
        case tenantId
        case unitId
        case unitGroupId
        case partnerVisible
        case unitOfMeasureDependant
        case enrolmentId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(unitId, forKey: .unitId)
        try container.encodeIfPresent(unitGroupId, forKey: .unitGroupId)
        try container.encodeIfPresent(partnerVisible, forKey: .partnerVisible)
        try container.encodeIfPresent(unitOfMeasureDependant, forKey: .unitOfMeasureDependant)
        try container.encodeIfPresent(enrolmentId, forKey: .enrolmentId)
    }
}

