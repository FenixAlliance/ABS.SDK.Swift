//
// PriceCalculationDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PriceCalculationDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var itemId: String?
    public var unitId: String?
    public var unitGroupId: String?
    public var priceId: String?
    public var priceListId: String?
    public var discountId: String?
    public var discountListId: String?
    public var tenantId: String?
    public var enrollmentId: String?
    public var roundingPolicyId: String?
    public var effectiveDiscountPercent: Double?
    public var currencyId: String?
    public var totalBaseAmount: Money?
    public var totalDiscountsAmount: Money?
    public var totalSurchargesAmount: Money?
    public var totalShippingAmount: Money?
    public var totalShippingTaxAmount: Money?
    public var totalTaxAmount: Money?
    public var totalAmount: Money?

    public init(id: String? = nil, timestamp: Date? = nil, itemId: String? = nil, unitId: String? = nil, unitGroupId: String? = nil, priceId: String? = nil, priceListId: String? = nil, discountId: String? = nil, discountListId: String? = nil, tenantId: String? = nil, enrollmentId: String? = nil, roundingPolicyId: String? = nil, effectiveDiscountPercent: Double? = nil, currencyId: String? = nil, totalBaseAmount: Money? = nil, totalDiscountsAmount: Money? = nil, totalSurchargesAmount: Money? = nil, totalShippingAmount: Money? = nil, totalShippingTaxAmount: Money? = nil, totalTaxAmount: Money? = nil, totalAmount: Money? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.itemId = itemId
        self.unitId = unitId
        self.unitGroupId = unitGroupId
        self.priceId = priceId
        self.priceListId = priceListId
        self.discountId = discountId
        self.discountListId = discountListId
        self.tenantId = tenantId
        self.enrollmentId = enrollmentId
        self.roundingPolicyId = roundingPolicyId
        self.effectiveDiscountPercent = effectiveDiscountPercent
        self.currencyId = currencyId
        self.totalBaseAmount = totalBaseAmount
        self.totalDiscountsAmount = totalDiscountsAmount
        self.totalSurchargesAmount = totalSurchargesAmount
        self.totalShippingAmount = totalShippingAmount
        self.totalShippingTaxAmount = totalShippingTaxAmount
        self.totalTaxAmount = totalTaxAmount
        self.totalAmount = totalAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case itemId
        case unitId
        case unitGroupId
        case priceId
        case priceListId
        case discountId
        case discountListId
        case tenantId
        case enrollmentId
        case roundingPolicyId
        case effectiveDiscountPercent
        case currencyId
        case totalBaseAmount
        case totalDiscountsAmount
        case totalSurchargesAmount
        case totalShippingAmount
        case totalShippingTaxAmount
        case totalTaxAmount
        case totalAmount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(unitId, forKey: .unitId)
        try container.encodeIfPresent(unitGroupId, forKey: .unitGroupId)
        try container.encodeIfPresent(priceId, forKey: .priceId)
        try container.encodeIfPresent(priceListId, forKey: .priceListId)
        try container.encodeIfPresent(discountId, forKey: .discountId)
        try container.encodeIfPresent(discountListId, forKey: .discountListId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(enrollmentId, forKey: .enrollmentId)
        try container.encodeIfPresent(roundingPolicyId, forKey: .roundingPolicyId)
        try container.encodeIfPresent(effectiveDiscountPercent, forKey: .effectiveDiscountPercent)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(totalBaseAmount, forKey: .totalBaseAmount)
        try container.encodeIfPresent(totalDiscountsAmount, forKey: .totalDiscountsAmount)
        try container.encodeIfPresent(totalSurchargesAmount, forKey: .totalSurchargesAmount)
        try container.encodeIfPresent(totalShippingAmount, forKey: .totalShippingAmount)
        try container.encodeIfPresent(totalShippingTaxAmount, forKey: .totalShippingTaxAmount)
        try container.encodeIfPresent(totalTaxAmount, forKey: .totalTaxAmount)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
    }
}

