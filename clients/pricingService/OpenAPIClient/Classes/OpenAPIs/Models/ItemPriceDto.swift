//
// ItemPriceDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ItemPriceDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var itemId: String?
    public var unitId: String?
    public var currencyId: String?
    public var discountId: String?
    public var unitGroupId: String?
    public var priceListId: String?
    public var discountListId: String?
    public var roundingPolicyId: String?
    public var enrollmentId: String?
    public var tenantId: String?
    public var price: Double?
    public var percent: Double?

    public init(id: String? = nil, timestamp: Date? = nil, itemId: String? = nil, unitId: String? = nil, currencyId: String? = nil, discountId: String? = nil, unitGroupId: String? = nil, priceListId: String? = nil, discountListId: String? = nil, roundingPolicyId: String? = nil, enrollmentId: String? = nil, tenantId: String? = nil, price: Double? = nil, percent: Double? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.itemId = itemId
        self.unitId = unitId
        self.currencyId = currencyId
        self.discountId = discountId
        self.unitGroupId = unitGroupId
        self.priceListId = priceListId
        self.discountListId = discountListId
        self.roundingPolicyId = roundingPolicyId
        self.enrollmentId = enrollmentId
        self.tenantId = tenantId
        self.price = price
        self.percent = percent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case itemId
        case unitId
        case currencyId
        case discountId
        case unitGroupId
        case priceListId
        case discountListId
        case roundingPolicyId
        case enrollmentId
        case tenantId
        case price
        case percent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(unitId, forKey: .unitId)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(discountId, forKey: .discountId)
        try container.encodeIfPresent(unitGroupId, forKey: .unitGroupId)
        try container.encodeIfPresent(priceListId, forKey: .priceListId)
        try container.encodeIfPresent(discountListId, forKey: .discountListId)
        try container.encodeIfPresent(roundingPolicyId, forKey: .roundingPolicyId)
        try container.encodeIfPresent(enrollmentId, forKey: .enrollmentId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(percent, forKey: .percent)
    }
}

