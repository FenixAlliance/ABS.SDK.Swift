//
// InvoiceAdjustmentUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InvoiceAdjustmentUpdateDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
    }
    public var currencyId: String?
    public var description: String?
    public var surchargePercent: Double?
    public var surchargeAmount: Double?
    public var discountPercent: Double?
    public var discountAmount: Double?
    public var totalSurcharge: Double?
    public var totalDiscount: Double?
    public var type: ModelType?

    public init(currencyId: String? = nil, description: String? = nil, surchargePercent: Double? = nil, surchargeAmount: Double? = nil, discountPercent: Double? = nil, discountAmount: Double? = nil, totalSurcharge: Double? = nil, totalDiscount: Double? = nil, type: ModelType? = nil) {
        self.currencyId = currencyId
        self.description = description
        self.surchargePercent = surchargePercent
        self.surchargeAmount = surchargeAmount
        self.discountPercent = discountPercent
        self.discountAmount = discountAmount
        self.totalSurcharge = totalSurcharge
        self.totalDiscount = totalDiscount
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currencyId
        case description
        case surchargePercent
        case surchargeAmount
        case discountPercent
        case discountAmount
        case totalSurcharge
        case totalDiscount
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(surchargePercent, forKey: .surchargePercent)
        try container.encodeIfPresent(surchargeAmount, forKey: .surchargeAmount)
        try container.encodeIfPresent(discountPercent, forKey: .discountPercent)
        try container.encodeIfPresent(discountAmount, forKey: .discountAmount)
        try container.encodeIfPresent(totalSurcharge, forKey: .totalSurcharge)
        try container.encodeIfPresent(totalDiscount, forKey: .totalDiscount)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

