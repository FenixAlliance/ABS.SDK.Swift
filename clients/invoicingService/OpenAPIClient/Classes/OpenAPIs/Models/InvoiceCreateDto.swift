//
// InvoiceCreateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InvoiceCreateDto: Codable, JSONEncodable, Hashable {

    public enum InvoiceType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
    }
    public enum DocumentType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public enum InvoiceStatus: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }
    public var id: UUID?
    public var timestamp: Date?
    public var closed: Bool?
    public var title: String?
    public var userId: String?
    public var tenantId: String?
    public var priceListId: String?
    public var description: String?
    public var enrollmentId: String?
    public var individualId: String?
    public var paymentTermId: String?
    public var organizationId: String?
    public var currencyId: String?
    public var forexRate: Double?
    public var firstName: String?
    public var lastName: String?
    public var companyName: String?
    public var billingEmail: String?
    public var addressLine1: String?
    public var addressLine2: String?
    public var postalCode: String?
    public var countryId: String?
    public var stateId: String?
    public var cityId: String?
    public var paid: Bool?
    public var number: Int?
    public var notes: String?
    public var customerNotes: String?
    public var orderId: String?
    public var enumeration: String?
    public var paymentModeId: String?
    public var receiverTenantId: String?
    public var enumerationRangeId: String?
    public var emisorBillingProfileId: String?
    public var receiverBillingProfileId: String?
    public var emisorWalletAccountId: String?
    public var receiverWalletAccountId: String?
    public var paymentDue: Date?
    public var invoiceType: InvoiceType?
    public var documentType: DocumentType?
    public var invoiceStatus: InvoiceStatus?
    public var validFrom: Date?
    public var validTo: Date?
    public var invoiceReferences: [InvoiceReferenceDto]?
    public var invoiceItemRecords: [InvoiceItemRecordDto]?
    public var invoiceAdjustments: [InvoiceAdjustmentDto]?

    public init(id: UUID? = nil, timestamp: Date? = nil, closed: Bool? = nil, title: String? = nil, userId: String? = nil, tenantId: String? = nil, priceListId: String? = nil, description: String? = nil, enrollmentId: String? = nil, individualId: String? = nil, paymentTermId: String? = nil, organizationId: String? = nil, currencyId: String? = nil, forexRate: Double? = nil, firstName: String? = nil, lastName: String? = nil, companyName: String? = nil, billingEmail: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, postalCode: String? = nil, countryId: String? = nil, stateId: String? = nil, cityId: String? = nil, paid: Bool? = nil, number: Int? = nil, notes: String? = nil, customerNotes: String? = nil, orderId: String? = nil, enumeration: String? = nil, paymentModeId: String? = nil, receiverTenantId: String? = nil, enumerationRangeId: String? = nil, emisorBillingProfileId: String? = nil, receiverBillingProfileId: String? = nil, emisorWalletAccountId: String? = nil, receiverWalletAccountId: String? = nil, paymentDue: Date? = nil, invoiceType: InvoiceType? = nil, documentType: DocumentType? = nil, invoiceStatus: InvoiceStatus? = nil, validFrom: Date? = nil, validTo: Date? = nil, invoiceReferences: [InvoiceReferenceDto]? = nil, invoiceItemRecords: [InvoiceItemRecordDto]? = nil, invoiceAdjustments: [InvoiceAdjustmentDto]? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.closed = closed
        self.title = title
        self.userId = userId
        self.tenantId = tenantId
        self.priceListId = priceListId
        self.description = description
        self.enrollmentId = enrollmentId
        self.individualId = individualId
        self.paymentTermId = paymentTermId
        self.organizationId = organizationId
        self.currencyId = currencyId
        self.forexRate = forexRate
        self.firstName = firstName
        self.lastName = lastName
        self.companyName = companyName
        self.billingEmail = billingEmail
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.postalCode = postalCode
        self.countryId = countryId
        self.stateId = stateId
        self.cityId = cityId
        self.paid = paid
        self.number = number
        self.notes = notes
        self.customerNotes = customerNotes
        self.orderId = orderId
        self.enumeration = enumeration
        self.paymentModeId = paymentModeId
        self.receiverTenantId = receiverTenantId
        self.enumerationRangeId = enumerationRangeId
        self.emisorBillingProfileId = emisorBillingProfileId
        self.receiverBillingProfileId = receiverBillingProfileId
        self.emisorWalletAccountId = emisorWalletAccountId
        self.receiverWalletAccountId = receiverWalletAccountId
        self.paymentDue = paymentDue
        self.invoiceType = invoiceType
        self.documentType = documentType
        self.invoiceStatus = invoiceStatus
        self.validFrom = validFrom
        self.validTo = validTo
        self.invoiceReferences = invoiceReferences
        self.invoiceItemRecords = invoiceItemRecords
        self.invoiceAdjustments = invoiceAdjustments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case closed
        case title
        case userId
        case tenantId
        case priceListId
        case description
        case enrollmentId
        case individualId
        case paymentTermId
        case organizationId
        case currencyId
        case forexRate
        case firstName
        case lastName
        case companyName
        case billingEmail
        case addressLine1
        case addressLine2
        case postalCode
        case countryId
        case stateId
        case cityId
        case paid
        case number
        case notes
        case customerNotes
        case orderId
        case enumeration
        case paymentModeId
        case receiverTenantId
        case enumerationRangeId
        case emisorBillingProfileId
        case receiverBillingProfileId
        case emisorWalletAccountId
        case receiverWalletAccountId
        case paymentDue
        case invoiceType
        case documentType
        case invoiceStatus
        case validFrom
        case validTo
        case invoiceReferences
        case invoiceItemRecords
        case invoiceAdjustments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(closed, forKey: .closed)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(priceListId, forKey: .priceListId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(enrollmentId, forKey: .enrollmentId)
        try container.encodeIfPresent(individualId, forKey: .individualId)
        try container.encodeIfPresent(paymentTermId, forKey: .paymentTermId)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(forexRate, forKey: .forexRate)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(companyName, forKey: .companyName)
        try container.encodeIfPresent(billingEmail, forKey: .billingEmail)
        try container.encodeIfPresent(addressLine1, forKey: .addressLine1)
        try container.encodeIfPresent(addressLine2, forKey: .addressLine2)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(paid, forKey: .paid)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(customerNotes, forKey: .customerNotes)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(enumeration, forKey: .enumeration)
        try container.encodeIfPresent(paymentModeId, forKey: .paymentModeId)
        try container.encodeIfPresent(receiverTenantId, forKey: .receiverTenantId)
        try container.encodeIfPresent(enumerationRangeId, forKey: .enumerationRangeId)
        try container.encodeIfPresent(emisorBillingProfileId, forKey: .emisorBillingProfileId)
        try container.encodeIfPresent(receiverBillingProfileId, forKey: .receiverBillingProfileId)
        try container.encodeIfPresent(emisorWalletAccountId, forKey: .emisorWalletAccountId)
        try container.encodeIfPresent(receiverWalletAccountId, forKey: .receiverWalletAccountId)
        try container.encodeIfPresent(paymentDue, forKey: .paymentDue)
        try container.encodeIfPresent(invoiceType, forKey: .invoiceType)
        try container.encodeIfPresent(documentType, forKey: .documentType)
        try container.encodeIfPresent(invoiceStatus, forKey: .invoiceStatus)
        try container.encodeIfPresent(validFrom, forKey: .validFrom)
        try container.encodeIfPresent(validTo, forKey: .validTo)
        try container.encodeIfPresent(invoiceReferences, forKey: .invoiceReferences)
        try container.encodeIfPresent(invoiceItemRecords, forKey: .invoiceItemRecords)
        try container.encodeIfPresent(invoiceAdjustments, forKey: .invoiceAdjustments)
    }
}

