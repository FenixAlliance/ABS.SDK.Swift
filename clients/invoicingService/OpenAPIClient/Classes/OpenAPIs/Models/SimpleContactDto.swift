//
// SimpleContactDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SimpleContactDto: Codable, JSONEncodable, Hashable {

    public enum ModelType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
    }
    public var id: String?
    public var timestamp: Date?
    public var qualifiedName: String?
    public var tenantId: String?
    public var type: ModelType?
    public var publicName: String?
    public var firstName: String?
    public var lastName: String?
    public var jobTitle: String?
    public var coverUrl: String?
    public var avatarUrl: String?
    public var countryId: String?
    public var timezoneId: String?
    public var languageId: String?
    public var socialProfileId: String?
    public var webUrl: String?
    public var gitHubUrl: String?
    public var twitchUrl: String?
    public var redditUrl: String?
    public var tikTokUrl: String?
    public var websiteUrl: String?
    public var twitterUrl: String?
    public var facebookUrl: String?
    public var youTubeUrl: String?
    public var linkedInUrl: String?
    public var instagramUrl: String?
    public var githubUsername: String?

    public init(id: String? = nil, timestamp: Date? = nil, qualifiedName: String? = nil, tenantId: String? = nil, type: ModelType? = nil, publicName: String? = nil, firstName: String? = nil, lastName: String? = nil, jobTitle: String? = nil, coverUrl: String? = nil, avatarUrl: String? = nil, countryId: String? = nil, timezoneId: String? = nil, languageId: String? = nil, socialProfileId: String? = nil, webUrl: String? = nil, gitHubUrl: String? = nil, twitchUrl: String? = nil, redditUrl: String? = nil, tikTokUrl: String? = nil, websiteUrl: String? = nil, twitterUrl: String? = nil, facebookUrl: String? = nil, youTubeUrl: String? = nil, linkedInUrl: String? = nil, instagramUrl: String? = nil, githubUsername: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.qualifiedName = qualifiedName
        self.tenantId = tenantId
        self.type = type
        self.publicName = publicName
        self.firstName = firstName
        self.lastName = lastName
        self.jobTitle = jobTitle
        self.coverUrl = coverUrl
        self.avatarUrl = avatarUrl
        self.countryId = countryId
        self.timezoneId = timezoneId
        self.languageId = languageId
        self.socialProfileId = socialProfileId
        self.webUrl = webUrl
        self.gitHubUrl = gitHubUrl
        self.twitchUrl = twitchUrl
        self.redditUrl = redditUrl
        self.tikTokUrl = tikTokUrl
        self.websiteUrl = websiteUrl
        self.twitterUrl = twitterUrl
        self.facebookUrl = facebookUrl
        self.youTubeUrl = youTubeUrl
        self.linkedInUrl = linkedInUrl
        self.instagramUrl = instagramUrl
        self.githubUsername = githubUsername
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case qualifiedName
        case tenantId
        case type
        case publicName
        case firstName
        case lastName
        case jobTitle
        case coverUrl
        case avatarUrl
        case countryId
        case timezoneId
        case languageId
        case socialProfileId
        case webUrl
        case gitHubUrl
        case twitchUrl
        case redditUrl
        case tikTokUrl
        case websiteUrl
        case twitterUrl
        case facebookUrl
        case youTubeUrl
        case linkedInUrl
        case instagramUrl
        case githubUsername
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(qualifiedName, forKey: .qualifiedName)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(publicName, forKey: .publicName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(jobTitle, forKey: .jobTitle)
        try container.encodeIfPresent(coverUrl, forKey: .coverUrl)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(timezoneId, forKey: .timezoneId)
        try container.encodeIfPresent(languageId, forKey: .languageId)
        try container.encodeIfPresent(socialProfileId, forKey: .socialProfileId)
        try container.encodeIfPresent(webUrl, forKey: .webUrl)
        try container.encodeIfPresent(gitHubUrl, forKey: .gitHubUrl)
        try container.encodeIfPresent(twitchUrl, forKey: .twitchUrl)
        try container.encodeIfPresent(redditUrl, forKey: .redditUrl)
        try container.encodeIfPresent(tikTokUrl, forKey: .tikTokUrl)
        try container.encodeIfPresent(websiteUrl, forKey: .websiteUrl)
        try container.encodeIfPresent(twitterUrl, forKey: .twitterUrl)
        try container.encodeIfPresent(facebookUrl, forKey: .facebookUrl)
        try container.encodeIfPresent(youTubeUrl, forKey: .youTubeUrl)
        try container.encodeIfPresent(linkedInUrl, forKey: .linkedInUrl)
        try container.encodeIfPresent(instagramUrl, forKey: .instagramUrl)
        try container.encodeIfPresent(githubUsername, forKey: .githubUsername)
    }
}

