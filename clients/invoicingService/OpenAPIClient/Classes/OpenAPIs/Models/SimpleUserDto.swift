//
// SimpleUserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SimpleUserDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var fullName: String?
    public var qualifiedName: String?
    public var publicName: String?
    public var lastName: String?
    public var firstName: String?
    public var coverUrl: String?
    public var avatarUrl: String?
    public var gitHubUrl: String?
    public var countryId: String?
    public var timezoneId: String?
    public var websiteUrl: String?
    public var twitterUrl: String?
    public var youTubeUrl: String?
    public var linkedInUrl: String?
    public var facebookUrl: String?
    public var instagramUrl: String?
    public var socialProfileId: String?

    public init(id: String? = nil, timestamp: Date? = nil, fullName: String? = nil, qualifiedName: String? = nil, publicName: String? = nil, lastName: String? = nil, firstName: String? = nil, coverUrl: String? = nil, avatarUrl: String? = nil, gitHubUrl: String? = nil, countryId: String? = nil, timezoneId: String? = nil, websiteUrl: String? = nil, twitterUrl: String? = nil, youTubeUrl: String? = nil, linkedInUrl: String? = nil, facebookUrl: String? = nil, instagramUrl: String? = nil, socialProfileId: String? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.fullName = fullName
        self.qualifiedName = qualifiedName
        self.publicName = publicName
        self.lastName = lastName
        self.firstName = firstName
        self.coverUrl = coverUrl
        self.avatarUrl = avatarUrl
        self.gitHubUrl = gitHubUrl
        self.countryId = countryId
        self.timezoneId = timezoneId
        self.websiteUrl = websiteUrl
        self.twitterUrl = twitterUrl
        self.youTubeUrl = youTubeUrl
        self.linkedInUrl = linkedInUrl
        self.facebookUrl = facebookUrl
        self.instagramUrl = instagramUrl
        self.socialProfileId = socialProfileId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case fullName
        case qualifiedName
        case publicName
        case lastName
        case firstName
        case coverUrl
        case avatarUrl
        case gitHubUrl
        case countryId
        case timezoneId
        case websiteUrl
        case twitterUrl
        case youTubeUrl
        case linkedInUrl
        case facebookUrl
        case instagramUrl
        case socialProfileId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(qualifiedName, forKey: .qualifiedName)
        try container.encodeIfPresent(publicName, forKey: .publicName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(coverUrl, forKey: .coverUrl)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(gitHubUrl, forKey: .gitHubUrl)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(timezoneId, forKey: .timezoneId)
        try container.encodeIfPresent(websiteUrl, forKey: .websiteUrl)
        try container.encodeIfPresent(twitterUrl, forKey: .twitterUrl)
        try container.encodeIfPresent(youTubeUrl, forKey: .youTubeUrl)
        try container.encodeIfPresent(linkedInUrl, forKey: .linkedInUrl)
        try container.encodeIfPresent(facebookUrl, forKey: .facebookUrl)
        try container.encodeIfPresent(instagramUrl, forKey: .instagramUrl)
        try container.encodeIfPresent(socialProfileId, forKey: .socialProfileId)
    }
}

