//
// InvoicesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class InvoicesAPI {

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesCountGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesCountGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2InvoicingServiceInvoicesCountGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<Int32Envelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/Count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesDiscountsAggregatePost(requestBody: [UUID], currencyId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MoneyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesDiscountsAggregatePostWithRequestBuilder(requestBody: requestBody, currencyId: currencyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/DiscountsAggregate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - returns: RequestBuilder<MoneyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesDiscountsAggregatePostWithRequestBuilder(requestBody: [UUID], currencyId: String? = nil) -> RequestBuilder<MoneyEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/DiscountsAggregate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencyId": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MoneyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesExtendedCountGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesExtendedCountGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/Extended/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2InvoicingServiceInvoicesExtendedCountGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<Int32Envelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/Extended/Count"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesExtendedGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExtendedInvoiceDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesExtendedGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/Extended
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<ExtendedInvoiceDtoListEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesExtendedGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<ExtendedInvoiceDtoListEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/Extended"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtendedInvoiceDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesGet(tenantId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesGetWithRequestBuilder(tenantId: tenantId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - returns: RequestBuilder<InvoiceDtoListEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesGetWithRequestBuilder(tenantId: UUID) -> RequestBuilder<InvoiceDtoListEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePost(requestBody: [UUID], currencyId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MoneyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostWithRequestBuilder(requestBody: requestBody, currencyId: currencyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/GlobalSurchargesAggregate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - returns: RequestBuilder<MoneyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostWithRequestBuilder(requestBody: [UUID], currencyId: String? = nil) -> RequestBuilder<MoneyEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/GlobalSurchargesAggregate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencyId": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MoneyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGet(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<Int32Envelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/Count"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGet(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceAdjustmentDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<InvoiceAdjustmentDtoListEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<InvoiceAdjustmentDtoListEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceAdjustmentDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceAdjustmentId: invoiceAdjustmentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceAdjustmentIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceAdjustmentId))"
        let invoiceAdjustmentIdPostEscape = invoiceAdjustmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceAdjustmentId}", with: invoiceAdjustmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceAdjustmentDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceAdjustmentId: invoiceAdjustmentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentId: (path)  
     - returns: RequestBuilder<InvoiceAdjustmentDtoEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentId: UUID) -> RequestBuilder<InvoiceAdjustmentDtoEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceAdjustmentIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceAdjustmentId))"
        let invoiceAdjustmentIdPostEscape = invoiceAdjustmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceAdjustmentId}", with: invoiceAdjustmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceAdjustmentDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentId: (path)  
     - parameter invoiceAdjustmentUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentId: UUID, invoiceAdjustmentUpdateDto: InvoiceAdjustmentUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceAdjustmentId: invoiceAdjustmentId, invoiceAdjustmentUpdateDto: invoiceAdjustmentUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentId: (path)  
     - parameter invoiceAdjustmentUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentId: UUID, invoiceAdjustmentUpdateDto: InvoiceAdjustmentUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceAdjustmentIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceAdjustmentId))"
        let invoiceAdjustmentIdPostEscape = invoiceAdjustmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceAdjustmentId}", with: invoiceAdjustmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceAdjustmentUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPost(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentCreateDto: InvoiceAdjustmentCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceAdjustmentCreateDto: invoiceAdjustmentCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceAdjustmentCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceAdjustmentCreateDto: InvoiceAdjustmentCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceAdjustmentCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdCalculatePut(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/InvoicingService/Invoices/{invoiceId}/Calculate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Calculate"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdDelete(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdDeleteWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/InvoicingService/Invoices/{invoiceId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdDeleteWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdExtendedGet(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Extended
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<InvoiceDtoEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<InvoiceDtoEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Extended"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGet(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<Int32Envelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/Count"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter itemId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesGet(tenantId: UUID, invoiceId: UUID, itemId: UUID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceLineDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, itemId: itemId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Lines
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter itemId: (query)  (optional)
     - returns: RequestBuilder<InvoiceLineDtoListEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID, itemId: UUID? = nil) -> RequestBuilder<InvoiceLineDtoListEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
            "itemId": (wrappedValue: itemId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceLineDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Calculate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Calculate"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceLineDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - returns: RequestBuilder<InvoiceLineDtoEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID) -> RequestBuilder<InvoiceLineDtoEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceLineDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineUpdateDto: InvoiceLineUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId, invoiceLineUpdateDto: invoiceLineUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineUpdateDto: InvoiceLineUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceLineUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID) -> RequestBuilder<Int32Envelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/Count"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceLineAppliedTaxDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - returns: RequestBuilder<InvoiceLineAppliedTaxDtoListEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID) -> RequestBuilder<InvoiceLineAppliedTaxDtoListEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceLineAppliedTaxDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineTaxId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineTaxId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId, invoiceLineTaxId: invoiceLineTaxId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/{invoiceLineTaxId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineTaxId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineTaxId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/{invoiceLineTaxId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let invoiceLineTaxIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineTaxId))"
        let invoiceLineTaxIdPostEscape = invoiceLineTaxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineTaxId}", with: invoiceLineTaxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineTaxId: (path)  
     - parameter invoiceLineAppliedTaxUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineTaxId: UUID, invoiceLineAppliedTaxUpdateDto: InvoiceLineAppliedTaxUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId, invoiceLineTaxId: invoiceLineTaxId, invoiceLineAppliedTaxUpdateDto: invoiceLineAppliedTaxUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/{invoiceLineTaxId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineTaxId: (path)  
     - parameter invoiceLineAppliedTaxUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineTaxId: UUID, invoiceLineAppliedTaxUpdateDto: InvoiceLineAppliedTaxUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/{invoiceLineTaxId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let invoiceLineTaxIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineTaxId))"
        let invoiceLineTaxIdPostEscape = invoiceLineTaxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineTaxId}", with: invoiceLineTaxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceLineAppliedTaxUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineAppliedTaxCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineAppliedTaxCreateDto: InvoiceLineAppliedTaxCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineId: invoiceLineId, invoiceLineAppliedTaxCreateDto: invoiceLineAppliedTaxCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineId: (path)  
     - parameter invoiceLineAppliedTaxCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineId: UUID, invoiceLineAppliedTaxCreateDto: InvoiceLineAppliedTaxCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceLineIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceLineId))"
        let invoiceLineIdPostEscape = invoiceLineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceLineId}", with: invoiceLineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceLineAppliedTaxCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesPost(tenantId: UUID, invoiceId: UUID, invoiceLineCreateDto: InvoiceLineCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdLinesPostWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceLineCreateDto: invoiceLineCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/{invoiceId}/Lines
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceLineCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdLinesPostWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceLineCreateDto: InvoiceLineCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceLineCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGet(invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetWithRequestBuilder(invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Payments/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetWithRequestBuilder(invoiceId: UUID) -> RequestBuilder<Int32Envelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Payments/Count"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGet(invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetWithRequestBuilder(invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/Payments
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<InvoiceDtoListEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetWithRequestBuilder(invoiceId: UUID) -> RequestBuilder<InvoiceDtoListEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Payments"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdPut(tenantId: UUID, invoiceId: UUID, invoiceUpdateDto: InvoiceUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdPutWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceUpdateDto: invoiceUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/InvoicingService/Invoices/{invoiceId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdPutWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceUpdateDto: InvoiceUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGet(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int32Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/References/Count
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<Int32Envelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<Int32Envelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/Count"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int32Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesGet(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceReferenceDtoListEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/References
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<InvoiceReferenceDtoListEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<InvoiceReferenceDtoListEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceReferenceDtoListEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete(tenantId: UUID, invoiceId: UUID, invoiceReferenceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceReferenceId: invoiceReferenceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceId: (path)  
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceReferenceId: UUID) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceReferenceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceReferenceId))"
        let invoiceReferenceIdPostEscape = invoiceReferenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceReferenceId}", with: invoiceReferenceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet(tenantId: UUID, invoiceId: UUID, invoiceReferenceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceReferenceDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceReferenceId: invoiceReferenceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceId: (path)  
     - returns: RequestBuilder<InvoiceReferenceDtoEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceReferenceId: UUID) -> RequestBuilder<InvoiceReferenceDtoEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceReferenceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceReferenceId))"
        let invoiceReferenceIdPostEscape = invoiceReferenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceReferenceId}", with: invoiceReferenceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceReferenceDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceId: (path)  
     - parameter invoiceReferenceUpdateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut(tenantId: UUID, invoiceId: UUID, invoiceReferenceId: UUID, invoiceReferenceUpdateDto: InvoiceReferenceUpdateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceReferenceId: invoiceReferenceId, invoiceReferenceUpdateDto: invoiceReferenceUpdateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceId: (path)  
     - parameter invoiceReferenceUpdateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceReferenceId: UUID, invoiceReferenceUpdateDto: InvoiceReferenceUpdateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let invoiceReferenceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceReferenceId))"
        let invoiceReferenceIdPostEscape = invoiceReferenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceReferenceId}", with: invoiceReferenceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceReferenceUpdateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesPost(tenantId: UUID, invoiceId: UUID, invoiceReferenceCreateDto: InvoiceReferenceCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId, invoiceReferenceCreateDto: invoiceReferenceCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/{invoiceId}/References
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter invoiceReferenceCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostWithRequestBuilder(tenantId: UUID, invoiceId: UUID, invoiceReferenceCreateDto: InvoiceReferenceCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceReferenceCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceCreateDto: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesPost(tenantId: UUID, invoiceCreateDto: InvoiceCreateDto? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmptyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesPostWithRequestBuilder(tenantId: tenantId, invoiceCreateDto: invoiceCreateDto).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceCreateDto: (body)  (optional)
     - returns: RequestBuilder<EmptyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesPostWithRequestBuilder(tenantId: UUID, invoiceCreateDto: InvoiceCreateDto? = nil) -> RequestBuilder<EmptyEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: invoiceCreateDto)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmptyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesTaxBasesAggregatePost(requestBody: [UUID], currencyId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MoneyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesTaxBasesAggregatePostWithRequestBuilder(requestBody: requestBody, currencyId: currencyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/TaxBasesAggregate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - returns: RequestBuilder<MoneyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesTaxBasesAggregatePostWithRequestBuilder(requestBody: [UUID], currencyId: String? = nil) -> RequestBuilder<MoneyEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/TaxBasesAggregate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencyId": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MoneyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesTaxesAggregatePost(requestBody: [UUID], currencyId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MoneyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesTaxesAggregatePostWithRequestBuilder(requestBody: requestBody, currencyId: currencyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/TaxesAggregate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - returns: RequestBuilder<MoneyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesTaxesAggregatePostWithRequestBuilder(requestBody: [UUID], currencyId: String? = nil) -> RequestBuilder<MoneyEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/TaxesAggregate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencyId": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MoneyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV2InvoicingServiceInvoicesTotalsAggregatePost(requestBody: [UUID], currencyId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MoneyEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV2InvoicingServiceInvoicesTotalsAggregatePostWithRequestBuilder(requestBody: requestBody, currencyId: currencyId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/InvoicingService/Invoices/TotalsAggregate
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter requestBody: (body)  
     - parameter currencyId: (query)  (optional)
     - returns: RequestBuilder<MoneyEnvelope> 
     */
    open class func apiV2InvoicingServiceInvoicesTotalsAggregatePostWithRequestBuilder(requestBody: [UUID], currencyId: String? = nil) -> RequestBuilder<MoneyEnvelope> {
        let localVariablePath = "/api/v2/InvoicingService/Invoices/TotalsAggregate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencyId": (wrappedValue: currencyId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MoneyEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getInvoiceAsync(tenantId: UUID, invoiceId: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InvoiceDtoEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return getInvoiceAsyncWithRequestBuilder(tenantId: tenantId, invoiceId: invoiceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/InvoicingService/Invoices/{invoiceId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter tenantId: (query)  
     - parameter invoiceId: (path)  
     - returns: RequestBuilder<InvoiceDtoEnvelope> 
     */
    open class func getInvoiceAsyncWithRequestBuilder(tenantId: UUID, invoiceId: UUID) -> RequestBuilder<InvoiceDtoEnvelope> {
        var localVariablePath = "/api/v2/InvoicingService/Invoices/{invoiceId}"
        let invoiceIdPreEscape = "\(APIHelper.mapValueToPathItem(invoiceId))"
        let invoiceIdPostEscape = invoiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{invoiceId}", with: invoiceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tenantId": (wrappedValue: tenantId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceDtoEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
