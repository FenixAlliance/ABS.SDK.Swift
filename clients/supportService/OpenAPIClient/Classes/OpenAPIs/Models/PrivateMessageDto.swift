//
// PrivateMessageDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PrivateMessageDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var timestamp: Date?
    public var read: Bool?
    public var title: String?
    public var message: String?
    public var conversationId: String?
    public var senderSocialProfileId: String?
    public var receiverSocialProfileID: String?
    public var sentTimestamp: Date?
    public var readTimestamp: Date?
    public var receivedTimestamp: Date?

    public init(id: String? = nil, timestamp: Date? = nil, read: Bool? = nil, title: String? = nil, message: String? = nil, conversationId: String? = nil, senderSocialProfileId: String? = nil, receiverSocialProfileID: String? = nil, sentTimestamp: Date? = nil, readTimestamp: Date? = nil, receivedTimestamp: Date? = nil) {
        self.id = id
        self.timestamp = timestamp
        self.read = read
        self.title = title
        self.message = message
        self.conversationId = conversationId
        self.senderSocialProfileId = senderSocialProfileId
        self.receiverSocialProfileID = receiverSocialProfileID
        self.sentTimestamp = sentTimestamp
        self.readTimestamp = readTimestamp
        self.receivedTimestamp = receivedTimestamp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case timestamp
        case read
        case title
        case message
        case conversationId
        case senderSocialProfileId
        case receiverSocialProfileID
        case sentTimestamp
        case readTimestamp
        case receivedTimestamp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(read, forKey: .read)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(conversationId, forKey: .conversationId)
        try container.encodeIfPresent(senderSocialProfileId, forKey: .senderSocialProfileId)
        try container.encodeIfPresent(receiverSocialProfileID, forKey: .receiverSocialProfileID)
        try container.encodeIfPresent(sentTimestamp, forKey: .sentTimestamp)
        try container.encodeIfPresent(readTimestamp, forKey: .readTimestamp)
        try container.encodeIfPresent(receivedTimestamp, forKey: .receivedTimestamp)
    }
}

