//
// OrderUpdateDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderUpdateDto: Codable, JSONEncodable, Hashable {

    public var tenantId: String?
    public var firstName: String?
    public var lastName: String?
    public var companyName: String?
    public var billingEmail: String?
    public var addressLine1: String?
    public var addressLine2: String?
    public var postalCode: String?
    public var countryId: String?
    public var stateId: String?
    public var cityId: String?
    public var billingLocationId: String?
    public var shippingLocationId: String?
    public var shippingMethodId: String?
    public var cartId: String?
    public var userId: String?
    public var forexRate: Double?
    public var currencyId: String?
    public var enrollmentId: String?
    public var individualId: String?
    public var organizationId: String?
    public var totalAmountInUsd: Double?
    public var totalTaxesInUsd: Double?
    public var receiverTenantId: String?
    public var closed: Bool?
    public var priceListId: String?
    public var paymentTermId: String?
    public var quoteStatus: String?
    public var effectiveTo: Date?
    public var effectiveFrom: Date?
    public var description: String?
    public var title: String?

    public init(tenantId: String? = nil, firstName: String? = nil, lastName: String? = nil, companyName: String? = nil, billingEmail: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, postalCode: String? = nil, countryId: String? = nil, stateId: String? = nil, cityId: String? = nil, billingLocationId: String? = nil, shippingLocationId: String? = nil, shippingMethodId: String? = nil, cartId: String? = nil, userId: String? = nil, forexRate: Double? = nil, currencyId: String? = nil, enrollmentId: String? = nil, individualId: String? = nil, organizationId: String? = nil, totalAmountInUsd: Double? = nil, totalTaxesInUsd: Double? = nil, receiverTenantId: String? = nil, closed: Bool? = nil, priceListId: String? = nil, paymentTermId: String? = nil, quoteStatus: String? = nil, effectiveTo: Date? = nil, effectiveFrom: Date? = nil, description: String? = nil, title: String? = nil) {
        self.tenantId = tenantId
        self.firstName = firstName
        self.lastName = lastName
        self.companyName = companyName
        self.billingEmail = billingEmail
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.postalCode = postalCode
        self.countryId = countryId
        self.stateId = stateId
        self.cityId = cityId
        self.billingLocationId = billingLocationId
        self.shippingLocationId = shippingLocationId
        self.shippingMethodId = shippingMethodId
        self.cartId = cartId
        self.userId = userId
        self.forexRate = forexRate
        self.currencyId = currencyId
        self.enrollmentId = enrollmentId
        self.individualId = individualId
        self.organizationId = organizationId
        self.totalAmountInUsd = totalAmountInUsd
        self.totalTaxesInUsd = totalTaxesInUsd
        self.receiverTenantId = receiverTenantId
        self.closed = closed
        self.priceListId = priceListId
        self.paymentTermId = paymentTermId
        self.quoteStatus = quoteStatus
        self.effectiveTo = effectiveTo
        self.effectiveFrom = effectiveFrom
        self.description = description
        self.title = title
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tenantId
        case firstName
        case lastName
        case companyName
        case billingEmail
        case addressLine1
        case addressLine2
        case postalCode
        case countryId
        case stateId
        case cityId
        case billingLocationId
        case shippingLocationId
        case shippingMethodId
        case cartId
        case userId
        case forexRate
        case currencyId
        case enrollmentId
        case individualId
        case organizationId
        case totalAmountInUsd
        case totalTaxesInUsd
        case receiverTenantId
        case closed
        case priceListId
        case paymentTermId
        case quoteStatus
        case effectiveTo
        case effectiveFrom
        case description
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(tenantId, forKey: .tenantId)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(companyName, forKey: .companyName)
        try container.encodeIfPresent(billingEmail, forKey: .billingEmail)
        try container.encodeIfPresent(addressLine1, forKey: .addressLine1)
        try container.encodeIfPresent(addressLine2, forKey: .addressLine2)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(cityId, forKey: .cityId)
        try container.encodeIfPresent(billingLocationId, forKey: .billingLocationId)
        try container.encodeIfPresent(shippingLocationId, forKey: .shippingLocationId)
        try container.encodeIfPresent(shippingMethodId, forKey: .shippingMethodId)
        try container.encodeIfPresent(cartId, forKey: .cartId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(forexRate, forKey: .forexRate)
        try container.encodeIfPresent(currencyId, forKey: .currencyId)
        try container.encodeIfPresent(enrollmentId, forKey: .enrollmentId)
        try container.encodeIfPresent(individualId, forKey: .individualId)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(totalAmountInUsd, forKey: .totalAmountInUsd)
        try container.encodeIfPresent(totalTaxesInUsd, forKey: .totalTaxesInUsd)
        try container.encodeIfPresent(receiverTenantId, forKey: .receiverTenantId)
        try container.encodeIfPresent(closed, forKey: .closed)
        try container.encodeIfPresent(priceListId, forKey: .priceListId)
        try container.encodeIfPresent(paymentTermId, forKey: .paymentTermId)
        try container.encodeIfPresent(quoteStatus, forKey: .quoteStatus)
        try container.encodeIfPresent(effectiveTo, forKey: .effectiveTo)
        try container.encodeIfPresent(effectiveFrom, forKey: .effectiveFrom)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(title, forKey: .title)
    }
}

